{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Exchange API",
    "description" : "<b>Note:</b> Test the API with curl:<br><br><code>curl -sS -u &lt;org&gt;/iamapikey:&lt;key&gt; https://&lt;host&gt;:&lt;port&gt;/edge-exchange/v1/orgs/... | jq</code></br></br>This API specification is intended to be used by developers",
    "termsOfService" : "",
    "license" : {
      "name" : "Apache License Version 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "2.95.0"
  },
  "externalDocs" : {
    "description" : "Open-horizon ExchangeAPI",
    "url" : "https://github.com/open-horizon/exchange-api"
  },
  "servers" : [ {
    "url" : "http://0.0.0.0:8080"
  } ],
  "security" : [ ],
  "paths" : {
    "/v1/admin/orgstatus" : {
      "get" : {
        "tags" : [ "administration" ],
        "summary" : "Returns the org-specific status of the Exchange server",
        "description" : "Returns a dictionary of statuses/statistics. Can be run by superuser, hub admins, and org admins.",
        "operationId" : "adminGetOrgStatusRoute",
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAdminOrgStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/status" : {
      "get" : {
        "tags" : [ "administration" ],
        "summary" : "Returns status of the Exchange server",
        "description" : "Returns a dictionary of statuses/statistics. Can be run by any user.",
        "operationId" : "adminGetStatusRoute",
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAdminStatusResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/version" : {
      "get" : {
        "tags" : [ "administration" ],
        "summary" : "Returns the version of the Exchange server",
        "description" : "Returns the version of the Exchange server as a simple string (no JSON or quotes). Can be run by anyone.",
        "operationId" : "adminGetVersionRoute",
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/initdb" : {
      "post" : {
        "tags" : [ "administration" ],
        "summary" : "Creates the table schema in the DB",
        "description" : "Creates the tables with the necessary schema in the Exchange DB. This is now called at exchange startup, if necessary. Can only be run by the root user.",
        "operationId" : "adminInitDbRoute",
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/dropdb" : {
      "post" : {
        "tags" : [ "administration" ],
        "summary" : "Deletes the tables from the DB",
        "description" : "Deletes the tables from the Exchange DB. **Warning: this will delete the data too!** Because this is a dangerous method, you must first get a 1-time token using GET /admin/dropdb/token, and use that to authenticate to this REST API method. Can only be run by the root user.",
        "operationId" : "adminDropDbRoute",
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/dropdb/token" : {
      "get" : {
        "tags" : [ "administration" ],
        "summary" : "Gets a 1-time token for deleting the DB",
        "description" : "Returns a timed token that can be given to POST /admin/dropdb. The token is good for 10 minutes. Since dropping the DB tables deletes all of their data, this is a way of confirming you really want to do it. This can only be run as root.",
        "operationId" : "adminGetDbTokenRoute",
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminDropdbTokenResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/hashpw" : {
      "post" : {
        "tags" : [ "administration" ],
        "summary" : "Returns a bcrypted hash of a password",
        "description" : "Takes the password specified in the request body, bcrypts it with a random salt, and returns the result. This can be useful if you want to specify root's hash pw in the config file instead of the clear pw.",
        "operationId" : "adminHashPwRoute",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminHashpwRequest"
              },
              "example" : {
                "password" : "pw to bcrypt"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/admin/reload" : {
      "post" : {
        "tags" : [ "administration" ],
        "summary" : "Tells the exchange reread its config file",
        "description" : "Directs the exchange server to reread /etc/horizon/exchange/config.json and continue running with those new settings. Can only be run by the root user.",
        "operationId" : "adminReloadRoute",
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/msgs/{msgid}" : {
      "get" : {
        "tags" : [ "agreement-bot/message" ],
        "summary" : "Returns A specific message that has been sent to this agreement-bot.",
        "description" : "Returns A specific message that has been sent to this agreement-bot. Deleted/post-TTL (Time To Live) messages will not be returned. Can be run by a user or the agbot.",
        "operationId" : "agbotGetMsgRoute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Agreement-bot id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "msgid",
          "in" : "path",
          "description" : "Message id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotMsgsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/message" ],
        "summary" : "Deletes a msg of an agbot",
        "description" : "Deletes a message that was sent to an agbot. This should be done by the agbot after each msg is read. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteMsgRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "msgid",
          "in" : "path",
          "description" : "ID of the msg to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/msgs" : {
      "get" : {
        "tags" : [ "agreement-bot/message" ],
        "summary" : "Returns all msgs sent to this agbot",
        "description" : "Returns all msgs that have been sent to this agbot. They will be returned in the order they were sent. All msgs that have been sent to this agbot will be returned, unless the agbot has deleted some, or some are past their TTL. Can be run by a user or the agbot.",
        "operationId" : "agbotGetMsgsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "maxmsgs",
          "in" : "query",
          "description" : "Maximum number of messages returned. If this is less than the number of messages available, the oldest messages are returned. Defaults to unlimited.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotMsgsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "agreement-bot/message" ],
        "summary" : "Sends a msg from a node to an agbot",
        "description" : "Sends a msg from a node to an agbot. The node must 1st sign the msg (with its private key) and then encrypt the msg (with the agbots's public key). Can be run by any node.",
        "operationId" : "agbotPostMsgRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to send a message to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostAgbotsMsgsRequest"
              },
              "example" : "{\n  \"message\": \"VW1RxzeEwTF0U7S96dIzSBQ/hRjyidqNvBzmMoZUW3hpd3hZDvs\",  // msg to be sent to the agbot\n  \"ttl\": 86400                                                       // time-to-live of this msg, in seconds\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/agreements/{agid}" : {
      "get" : {
        "tags" : [ "agreement-bot/agreement" ],
        "summary" : "Returns an agreement for an agbot",
        "description" : "Returns the agreement with the specified agid for the specified agbot id. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotAgreementsResponse"
                },
                "example" : {
                  "agreements" : {
                    "agreementname" : {
                      "service" : {
                        "orgid" : "string",
                        "pattern" : "string",
                        "url" : "string"
                      },
                      "state" : "string",
                      "lastUpdated" : "2019-05-14T16:34:37.173Z[UTC]",
                      "dataLastReceived" : ""
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "agreement-bot/agreement" ],
        "summary" : "Adds/updates an agreement of an agbot",
        "description" : "Adds a new agreement of an agbot to the exchange DB, or updates an existing agreement. This is called by the owning user or the agbot to give their information about the agreement.",
        "operationId" : "agbotPutAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement to be added/updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutAgbotAgreementRequest"
              },
              "example" : {
                "service" : {
                  "orgid" : "string",
                  "pattern" : "string",
                  "url" : "string"
                },
                "state" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/agreement" ],
        "summary" : "Deletes an agreement of an agbot",
        "description" : "Deletes an agreement of an agbot. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/agreements" : {
      "get" : {
        "tags" : [ "agreement-bot/agreement" ],
        "summary" : "Returns all agreements this agbot is in",
        "description" : "Returns all agreements that this agbot is part of. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetAgreementsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotAgreementsResponse"
                },
                "example" : "{\n  \"agreements\": {\n    \"agreementname\": {\n      \"service\": {\n        \"orgid\": \"string\",\n        \"pattern\": \"string\",\n        \"url\": \"string\"\n      },\n      \"state\": \"string\",\n      \"lastUpdated\": \"2019-05-14T16:34:37.173Z[UTC]\",\n      \"dataLastReceived\": \"\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/agreement" ],
        "summary" : "Deletes all agreements of an agbot",
        "description" : "Deletes all of the current agreements of an agbot. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteAgreementsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/businesspols/{buspolid}" : {
      "get" : {
        "tags" : [ "agreement-bot/policy" ],
        "summary" : "Returns a business policy this agbot is serving",
        "description" : "Returns the business policy with the specified patid for the specified agbot id. The patid should be in the form businessPolOrgid_businessPol. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetBusPolRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "buspolid",
          "in" : "path",
          "description" : "ID of the business policy.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotBusinessPolsResponse"
                },
                "example" : {
                  "businessPols" : {
                    "buspolid" : {
                      "businessPolOrgid" : "string",
                      "businessPol" : "string",
                      "nodeOrgid" : "string",
                      "lastUpdated" : "string"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/policy" ],
        "summary" : "Deletes a business policy of an agbot",
        "description" : "Deletes a business policy that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteBusPolRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "buspolid",
          "in" : "path",
          "description" : "ID of the business policy to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/businesspols" : {
      "get" : {
        "tags" : [ "agreement-bot/policy" ],
        "summary" : "Returns all business policies served by this agbot",
        "description" : "Returns all business policies that this agbot is finding nodes for to make agreements with them. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetBusPolsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotBusinessPolsResponse"
                },
                "example" : "{\n\"businessPols\" : {\n  \"buspolid\": {\n    \"businessPolOrgid\": \"string\",\n    \"businessPol\": \"string\",\n    \"nodeOrgid\" : \"string\",\n    \"lastUpdated\": \"string\"\n  },\n    ...\n}\n}"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "agreement-bot/policy" ],
        "summary" : "Adds a business policy that the agbot should serve",
        "description" : "Adds a new business policy and node org that this agbot should find nodes for to make agreements with them. This is called by the owning user or the agbot to give their information about the business policy.",
        "operationId" : "agbotPostBusPolRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostAgbotBusinessPolRequest"
              },
              "example" : "{\n  \"businessPolOrgid\": \"string\",\n  \"businessPol\": \"string\",       // can be \"*\" to mean all business policies in the org\n  \"nodeOrgid\": \"string\"          // (optional) if omitted it defaults to businessPolOrgid (currently it can *not* be different from businessPolOrgid)\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/policy" ],
        "summary" : "Deletes all business policies of an agbot",
        "description" : "Deletes all of the current business policies that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteBusPolsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/patterns/{patid}" : {
      "get" : {
        "tags" : [ "agreement-bot/pattern" ],
        "summary" : "Returns a pattern this agbot is serving",
        "description" : "Returns the pattern with the specified patid for the specified agbot id. The patid should be in the form patternOrgid_pattern. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetPatternRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "patid",
          "in" : "path",
          "description" : "ID of the pattern.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotPatternsResponse"
                },
                "example" : {
                  "patterns" : {
                    "patternname" : {
                      "patternOrgid" : "string",
                      "pattern" : "string",
                      "nodeOrgid" : "string",
                      "lastUpdated" : "2019-05-14T16:34:36.397Z[UTC]"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/pattern" ],
        "summary" : "Deletes a pattern of an agbot",
        "description" : "Deletes a pattern that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeletePatRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "patid",
          "in" : "path",
          "description" : "ID of the pattern to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/patterns" : {
      "get" : {
        "tags" : [ "agreement-bot/pattern" ],
        "summary" : "Returns all patterns served by this agbot",
        "description" : "Returns all patterns that this agbot is finding nodes for to make agreements with them. Can be run by the owning user or the agbot.",
        "operationId" : "agbotGetPatternsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotPatternsResponse"
                },
                "example" : "{\n  \"patterns\": {\n    \"pattern1\": {\n      \"patternOrgid\": \"string\",\n      \"pattern\": \"string\",\n      \"nodeOrgid\": \"string\",\n      \"lastUpdated\": \"2019-05-14T16:34:36.295Z[UTC]\"\n    },\n    \"pattern2\": {\n      \"patternOrgid\": \"string\",\n      \"pattern\": \"string\",\n      \"nodeOrgid\": \"string\",\n      \"lastUpdated\": \"2019-05-14T16:34:36.397Z[UTC]\"\n    },\n      ...\n  }\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "agreement-bot/pattern" ],
        "summary" : "Adds a pattern that the agbot should serve",
        "description" : "Adds a new pattern and node org that this agbot should find nodes for to make agreements with them. This is called by the owning user or the agbot to give their information about the pattern.",
        "operationId" : "agbotPostPatRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostAgbotPatternRequest"
              },
              "example" : "{\n  \"patternOrgid\": \"string\",\n  \"pattern\": \"string\",    // can be \"*\" to mean all patterns in the org\n  \"nodeOrgid\": \"string\"   // (optional) if omitted it defaults to patternOrgid\n}"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot/pattern" ],
        "summary" : "Deletes all patterns of an agbot",
        "description" : "Deletes all of the current patterns that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeletePatsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}/heartbeat" : {
      "post" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Tells the exchange this agbot is still operating",
        "description" : "Lets the exchange know this agbot is still active. Can be run by the owning user or the agbot.",
        "operationId" : "agbotHeartbeatRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots/{id}" : {
      "get" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Returns an agbot",
        "description" : "Returns the agbot (Agreement Bot) with the specified id. Can be run by a user or the agbot.",
        "operationId" : "agbotGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attribute",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire node resource (including services) will be returned",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotsResponse"
                },
                "example" : {
                  "agbots" : {
                    "orgid/agbotname" : {
                      "token" : "string",
                      "name" : "string",
                      "owner" : "string",
                      "msgEndPoint" : "",
                      "lastHeartbeat" : "2020-05-27T19:01:10.713Z[UTC]",
                      "publicKey" : "string"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Add/updates an agbot",
        "description" : "Adds a new agbot (Agreement Bot) to the exchange DB, or updates an existing agbot. This must be called by the user to add an agbot, and then can be called by that user or agbot to update itself.",
        "operationId" : "agbotPutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutAgbotsRequest"
              },
              "example" : {
                "token" : "abc",
                "name" : "myagbot",
                "publicKey" : "ABCDEF"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource add/updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Deletes an agbot",
        "description" : "Deletes an agbot (Agreement Bot), and deletes the agreements stored for this agbot (but does not actually cancel the agreements between the nodes and agbot). Can be run by the owning user or the agbot.",
        "operationId" : "agbotDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Updates 1 attribute of an agbot",
        "description" : "Updates some attributes of an agbot. This can be called by the user or the agbot.",
        "operationId" : "agbotPatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the following attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchAgbotsRequest"
              },
              "example" : {
                "token" : "abc",
                "name" : "myagbot",
                "msgEndPoint" : "string",
                "publicKey" : "ABCDEF"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agbots" : {
      "get" : {
        "tags" : [ "agreement-bot" ],
        "summary" : "Returns all agbots",
        "description" : "Returns all agbots (Agreement Bots). Can be run by any user.",
        "operationId" : "agbotsGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idfilter",
          "in" : "query",
          "description" : "Filter results to only include agbots with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter results to only include agbots with this name (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include agbots with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAgbotsResponse"
                },
                "example" : "{\n  \"agbots\": {\n    \"orgid/agbotname\": {\n      \"token\": \"string\",\n      \"name\": \"string\",\n      \"owner\": \"string\",\n      \"msgEndPoint\": \"\",\n      \"lastHeartbeat\": \"2020-05-27T19:01:10.713Z[UTC]\",\n      \"publicKey\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/business/policies/{policy}/search" : {
      "post" : {
        "tags" : [ "policy" ],
        "summary" : "Returns matching nodes for this business policy",
        "description" : "Returns the matching nodes for this business policy that do not already have an agreement for the specified service. Can be run by a user or agbot (but not a node).",
        "operationId" : "busPolPostSearchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostBusinessPolicySearchRequest"
              },
              "example" : "{\n  \"changedSince\": 123456L,                // [Long > 0L, 0L], Only return nodes that have changed since this Unix epoch time. Value 0L disables filter.\n  \"nodeOrgids\": [\"org1\", \"org2\", \"...\"],  // (optional), Defaults to the same organization the business policy is in\n  \"numEntries\": 100,                      // (optional) [Int > 0], Maximum number of nodes returned\n  \"session\": \"token\"                      // Constrains multiple Agbot instances to a singular search.\n}"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostBusinessPolicySearchResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          },
          "409" : {
            "description" : "old session",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicySearchResponseDesync"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orgs/{orgid}/business/policies/{policy}" : {
      "get" : {
        "tags" : [ "policy" ],
        "summary" : "Returns a business policy",
        "description" : "Returns the business policy with the specified id. Can be run by a user, node, or agbot.",
        "operationId" : "busPolGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Business Policy name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire business policy resource will be returned.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessPoliciesResponse"
                },
                "example" : {
                  "businessPolicy" : {
                    "orgid/mybuspol" : {
                      "owner" : "string",
                      "label" : "string",
                      "description" : "string",
                      "service" : {
                        "name" : "string",
                        "org" : "string",
                        "arch" : "string",
                        "serviceVersions" : [ {
                          "version" : "1.2.3",
                          "priority" : null,
                          "upgradePolicy" : null
                        } ],
                        "nodeHealth" : {
                          "missing_heartbeat_interval" : 600,
                          "check_agreement_status" : 120
                        }
                      },
                      "userInput" : [ ],
                      "properties" : [ {
                        "name" : "string",
                        "type" : "string",
                        "value" : "string"
                      } ],
                      "constraints" : [ "a == b" ],
                      "lastUpdated" : "string",
                      "created" : "string"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "policy" ],
        "summary" : "Updates a business policy",
        "description" : "Updates a business policy resource. This can only be called by the user that created it.",
        "operationId" : "busPolPutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Business Policy name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Business Policy object that needs to be updated. See details in the POST route above.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutBusinessPolicyRequest"
              },
              "example" : "// (remove all of the comments like this before using)\n{\n  \"label\": \"name of the business policy\",  // this will be displayed in the UI\n  \"description\": \"descriptive text\",\n  // The services that this business policy applies to. (The services must exist before creating this business policy.)\n  \"service\": {\n    \"name\": \"mydomain.com.weather\",\n    \"org\": \"myorg\",\n    \"arch\": \"amd64\",                 // can be set to \"*\" or \"\" to mean all architectures\n    // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n    \"serviceVersions\": [\n      {\n        \"version\": \"1.0.1\",\n        \"priority\": {               // can be omitted\n          \"priority_value\": 50,\n          \"retries\": 1,\n          \"retry_durations\": 3600,\n          \"verified_durations\": 52\n        },\n        // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n        \"upgradePolicy\": {           // can be omitted\n          \"lifecycle\": \"immediate\",\n          \"time\": \"01:00AM\"          // reserved for future use\n        }\n      }\n    ],\n    // If not using agbot node health check, this field can be set to {} or omitted completely.\n    \"nodeHealth\": {                       // can be omitted\n      \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n      \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n    }\n  },\n  // Override or set user input variables that are defined in the services used by this business policy.\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  \"properties\": [\n    {\n      \"name\": \"mypurpose\",\n      \"value\": \"myservice-testing\",\n      \"type\": \"string\"               // (optional) [boolean, float, int, list of strings, string, version]\n    }\n  ],\n  \"constraints\": [\n    \"a == b\"\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "policy" ],
        "summary" : "Adds a business policy",
        "description" : "Creates a business policy resource. A business policy resource specifies the service that should be deployed based on the specified properties and constraints. This can only be called by a user.",
        "operationId" : "busPolPostRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Business Policy name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutBusinessPolicyRequest"
              },
              "example" : "// (remove all of the comments like this before using)\n{\n  \"label\": \"name of the business policy\",  // this will be displayed in the UI\n  \"description\": \"descriptive text\",\n  // The services that this business policy applies to. (The services must exist before creating this business policy.)\n  \"service\": {\n    \"name\": \"mydomain.com.weather\",\n    \"org\": \"myorg\",\n    \"arch\": \"amd64\",                 // can be set to \"*\" or \"\" to mean all architectures\n    // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n    \"serviceVersions\": [\n      {\n        \"version\": \"1.0.1\",\n        \"priority\": {               // can be omitted\n          \"priority_value\": 50,\n          \"retries\": 1,\n          \"retry_durations\": 3600,\n          \"verified_durations\": 52\n        },\n        // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n        \"upgradePolicy\": {           // can be omitted\n          \"lifecycle\": \"immediate\",\n          \"time\": \"01:00AM\"          // reserved for future use\n        }\n      }\n    ],\n    // If not using agbot node health check, this field can be set to {} or omitted completely.\n    \"nodeHealth\": {                       // can be omitted\n      \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n      \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n    }\n  },\n  // Override or set user input variables that are defined in the services used by this business policy.\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  \"properties\": [\n    {\n      \"name\": \"mypurpose\",\n      \"value\": \"myservice-testing\",\n      \"type\": \"string\"               // (optional) [boolean, float, int, list of strings, string, version]\n    }\n  ],\n  \"constraints\": [\n    \"a == b\"\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "policy" ],
        "summary" : "Deletes a business policy",
        "description" : "Deletes a business policy. Can only be run by the owning user.",
        "operationId" : "busPolDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Business Policy name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "policy" ],
        "summary" : "Updates 1 attribute of a business policy",
        "description" : "Updates one attribute of a business policy. This can only be called by the user that originally created this business policy resource.",
        "operationId" : "busPolPatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "policy",
          "in" : "path",
          "description" : "Business Policy name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutBusinessPolicyRequest"
              },
              "example" : "// (remove all of the comments like this before using)\n{\n  \"label\": \"name of the business policy\",  // this will be displayed in the UI\n  \"description\": \"descriptive text\",\n  // The services that this business policy applies to. (The services must exist before creating this business policy.)\n  \"service\": {\n    \"name\": \"mydomain.com.weather\",\n    \"org\": \"myorg\",\n    \"arch\": \"amd64\",                 // can be set to \"*\" or \"\" to mean all architectures\n    // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n    \"serviceVersions\": [\n      {\n        \"version\": \"1.0.1\",\n        \"priority\": {               // can be omitted\n          \"priority_value\": 50,\n          \"retries\": 1,\n          \"retry_durations\": 3600,\n          \"verified_durations\": 52\n        },\n        // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n        \"upgradePolicy\": {           // can be omitted\n          \"lifecycle\": \"immediate\",\n          \"time\": \"01:00AM\"          // reserved for future use\n        }\n      }\n    ],\n    // If not using agbot node health check, this field can be set to {} or omitted completely.\n    \"nodeHealth\": {                       // can be omitted\n      \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n      \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n    }\n  },\n  // Override or set user input variables that are defined in the services used by this business policy.\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  \"properties\": [\n    {\n      \"name\": \"mypurpose\",\n      \"value\": \"myservice-testing\",\n      \"type\": \"string\"               // (optional) [boolean, float, int, list of strings, string, version]\n    }\n  ],\n  \"constraints\": [\n    \"a == b\"\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/business/policies" : {
      "get" : {
        "tags" : [ "policy" ],
        "summary" : "Returns all business policies",
        "description" : "Returns all business policy definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId" : "busPolsGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idfilter",
          "in" : "query",
          "description" : "Filter results to only include business policies with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include business policies with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "Filter results to only include business policies with this label (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Filter results to only include business policies with this description (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetBusinessPoliciesResponse"
                },
                "example" : "{\n  \"businessPolicy\": {\n    \"orgid/mybuspol\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"service\": {\n        \"name\": \"string\",\n        \"org\": \"string\",\n        \"arch\": \"string\",\n        \"serviceVersions\": [\n          {\n            \"version\": \"1.2.3\",\n            \"priority\": null,\n            \"upgradePolicy\": null\n          }\n        ],\n        \"nodeHealth\": {\n          \"missing_heartbeat_interval\": 600,\n          \"check_agreement_status\": 120\n        }\n      },\n      \"userInput\": [],\n      \"properties\": [\n        {\n          \"name\": \"string\",\n          \"type\": \"string\",\n          \"value\": \"string\"\n        }\n      ],\n      \"constraints\": [\n        \"a == b\"\n      ],\n      \"lastUpdated\": \"string\",\n      \"created\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/catalog/{orgid}/patterns" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Returns all patterns",
        "description" : "Returns all pattern definitions in this organization and in the IBM organization. Can be run by any user, node, or agbot.",
        "operationId" : "catalogGetPatternsAll",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idfilter",
          "in" : "query",
          "description" : "Filter results to only include patterns with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include patterns with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "public",
          "in" : "query",
          "description" : "Filter results to only include patterns with this public setting",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "Filter results to only include patterns with this label (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Filter results to only include patterns with this description (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPatternsResponse"
                },
                "example" : "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/catalog/{orgid}/services" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Returns all services",
        "description" : "Returns all service definitions in this organization and in the IBM organization. Can be run by any user, node, or agbot.",
        "operationId" : "catalogGetServicesAll",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include services with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "public",
          "in" : "query",
          "description" : "Filter results to only include services with this public setting",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "description" : "Filter results to only include services with this url (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter results to only include services with this version (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "arch",
          "in" : "query",
          "description" : "Filter results to only include services with this arch (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nodetype",
          "in" : "query",
          "description" : "Filter results to only include services that are deployable on this nodeType. Valid values: devices or clusters",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requiredurl",
          "in" : "query",
          "description" : "Filter results to only include services that use this service with this url (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServicesResponse"
                },
                "example" : "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/catalog/patterns" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Returns patterns in the IBM catalog",
        "description" : "Returns public pattern definitions from orgs of the specified orgtype (default is IBM). Can be run by any user, node, or agbot.",
        "operationId" : "catalogGetPatternsRoute",
        "parameters" : [ {
          "name" : "orgtype",
          "in" : "query",
          "description" : "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "IBM" ]
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPatternsResponse"
                },
                "example" : "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/catalog/services" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "Returns services in the IBM catalog",
        "description" : "Returns public service definitions from orgs of the specified orgtype (default is IBM). Can be run by any user, node, or agbot.",
        "operationId" : "catalogGetServicesRoute",
        "parameters" : [ {
          "name" : "orgtype",
          "in" : "query",
          "description" : "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "IBM" ]
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServicesResponse"
                },
                "example" : "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/node-details" : {
      "get" : {
        "tags" : [ "node" ],
        "summary" : "Returns all nodes (edge devices) with node errors, policy and status. Can be run by any user or agbot.",
        "description" : "Returns all nodes with node errors, policy and status",
        "operationId" : "nodesGetDetails",
        "parameters" : [ {
          "name" : "arch",
          "in" : "query",
          "description" : "Filter results to only include nodes with this architecture (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter results to only include nodes with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter results to only include nodes with this name (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter results to only include nodes with this type ('device' or 'cluster')",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include nodes with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NodeDetails"
                  }
                },
                "example" : "[\n  {\n    \"arch\": \"string\",\n    \"connectivity\": {\n      \"string\": boolean,\n      \"string\": boolean\n    },\n    \"constraints\": [\n      \"string\",\n      \"string\",\n      \"string\"\n    ],\n    \"errors\": [\n      {\n        \"event_code\": \"string\",\n        \"hidden\": boolean,\n        \"message\": \"string\",\n        \"record_id\": \"string\"\n      }\n    ],\n    \"heartbeatIntervals\": {\n      \"intervalAdjustment\": 0,\n      \"minInterval\": 0,\n      \"maxInterval\": 0\n    },\n    \"id\": \"string\",\n    \"lastHeartbeat\": \"string\",\n    \"lastUpdatedNode\": \"string\",\n    \"lastUpdatedNodeError\": \"string\",\n    \"lastUpdatedNodePolicy\": \"string\",\n    \"lastUpdatedNodeStatus\": \"string\",\n    \"msgEndPoint\": \"\",\n    \"name\": \"string\",\n    \"nodeType\": \"device\",\n    \"owner\": \"string\",\n    \"orgid\": \"string\",\n    \"pattern\": \"\",\n    \"properties\": [\n      \"string\": \"string\",\n      \"string\": \"string\",\n      \"string\": \"string\"\n    ],\n    \"publicKey\": \"string\",\n    \"registeredServices\": [\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\"\n      },\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\"\n      },\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\",\n      }\n    ],\n    \"runningServices\": \"|orgid/serviceid|\",\n    \"services\": [\n      {\n        \"agreementId\": \"string\",\n        \"arch\": \"string\",\n        \"containerStatus\": [],\n        \"operatorStatus\": {},\n        \"orgid\": \"string\",\n        \"serviceUrl\": \"string\",\n        \"version\": \"string\",\n        \"configState\": \"string\"\n      }\n    ],\n    \"softwareVersions\": {},\n    \"token\": \"string\",\n    \"userInput\": [\n      {\n        \"inputs\": [\n          {\n            \"name\": \"var1\",\n            \"value\": \"someString\"\n          },\n          {\n            \"name\": \"var2\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"var3\",\n            \"value\": 22.2\n          }\n        ],\n        \"serviceArch\": \"string\",\n        \"serviceOrgid\": \"string\",\n        \"serviceUrl\": \"string\",\n        \"serviceVersionRange\": \"string\"\n      }\n    ],\n  }\n]"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/msgs/{msgid}" : {
      "delete" : {
        "tags" : [ "node/message" ],
        "summary" : "Deletes a msg of an node",
        "description" : "Deletes a message that was sent to an node. This should be done by the node after each msg is read. Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteMsgRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "msgid",
          "in" : "path",
          "description" : "ID of the msg to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/msgs/{msgId}" : {
      "get" : {
        "tags" : [ "node/message" ],
        "summary" : "Returns A specific message that has been sent to this node.",
        "description" : "Returns A specific message that has been sent to this node. Deleted/post-TTL (Time To Live) messages will not be returned. Can be run by a user or the node.",
        "operationId" : "nodeGetMsgRoute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "msgid",
          "in" : "path",
          "description" : "Specific node message.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodeMsgsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/msgs" : {
      "get" : {
        "tags" : [ "node/message" ],
        "summary" : "Returns all msgs sent to this node",
        "description" : "Returns all msgs that have been sent to this node. They will be returned in the order they were sent. All msgs that have been sent to this node will be returned, unless the node has deleted some, or some are past their TTL. Can be run by a user or the node.",
        "operationId" : "nodeGetMsgsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "maxmsgs",
          "in" : "query",
          "description" : "Maximum number of messages returned. If this is less than the number of messages available, the oldest messages are returned. Defaults to unlimited.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodeMsgsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "node/message" ],
        "summary" : "Sends a msg from an agbot to a node",
        "description" : "Sends a msg from an agbot to a node. The agbot must 1st sign the msg (with its private key) and then encrypt the msg (with the node's public key). Can be run by any agbot.",
        "operationId" : "nodePostMsgRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to send a message to.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostNodesMsgsRequest"
              },
              "example" : "{\n  \"message\": \"VW1RxzeEwTF0U7S96dIzSBQ/hRjyidqNvBzmMoZUW3hpd3hZDvs\",  // msg to be sent to the node\n  \"ttl\": 86400                                                       // time-to-live of this msg, in seconds\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/agreements/{agid}" : {
      "get" : {
        "tags" : [ "node/agreement" ],
        "summary" : "Returns an agreement for a node",
        "description" : "Returns the agreement with the specified agid for the specified node id. Can be run by a user or the node.",
        "operationId" : "nodeGetAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodeAgreementsResponse"
                },
                "example" : "{\n  \"agreements\": {\n    \"agreementname\": {\n      \"services\": [\n        { \"orgid\": \"string\", \"url\": \"string\"},\n          ...\n      ],\n      \"agrService\": {\n        \"orgid\": \"string\",\n        \"pattern\": \"string\",\n        \"url\": \"string\"\n      },\n      \"state\": \"string\",\n      \"lastUpdated\": \"string\"\n    }\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "node/agreement" ],
        "summary" : "Adds/updates an agreement of a node",
        "description" : "Adds a new agreement of a node, or updates an existing agreement. This is called by the node or owning user to give their information about the agreement.",
        "operationId" : "nodePutAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement to be added/updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "noheartbeat",
          "in" : "query",
          "description" : "If set to 'true', skip the step to update the node's lastHeartbeat field.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutNodeAgreementRequest"
              },
              "example" : "{\n  \"services\": [                        // specify this for CS-type agreements (optional section)\n    {\n     \"orgid\": \"myorg\", \n     \"url\": \"mydomain.com.rtlsdr\"\n    }\n  ],\n  \"agreementService\": {                // specify this for pattern-type agreements (optional section)\n    \"orgid\": \"myorg\",                  // currently set to the node id, but not used\n    \"pattern\": \"myorg/mypattern\",      // composite pattern (organization/pattern)\n    \"url\": \"myorg/mydomain.com.sdr\"    // composite service url (organization/service)\n  },\n  \"state\": \"negotiating\"               // current agreement state: [negotiating, signed, finalized, ...]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node/agreement" ],
        "summary" : "Deletes an agreement of a node",
        "description" : "Deletes an agreement of a node. Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteAgreementRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "agid",
          "in" : "path",
          "description" : "ID of the agreement to be deleted.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/agreements" : {
      "get" : {
        "tags" : [ "node/agreement" ],
        "summary" : "Returns all agreements this node is in",
        "description" : "Returns all agreements that this node is part of. Can be run by a user or the node.",
        "operationId" : "nodeGetAgreementsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodeAgreementsResponse"
                },
                "example" : "{\n  \"agreements\": {\n    \"agreementname\": {\n      \"services\": [\n        { \"orgid\": \"string\", \"url\": \"string\"},\n          ...\n      ],\n      \"agrService\": {\n        \"orgid\": \"string\",\n        \"pattern\": \"string\",\n        \"url\": \"string\"\n      },\n      \"state\": \"string\",\n      \"lastUpdated\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node/agreement" ],
        "summary" : "Deletes all agreements of a node",
        "description" : "Deletes all of the current agreements of a node. Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteAgreementsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/policy" : {
      "get" : {
        "tags" : [ "node/policy" ],
        "summary" : "Returns the node policy",
        "description" : "Returns the node run time policy. Can be run by a user or the node.",
        "operationId" : "nodeGetPolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodePolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "node/policy" ],
        "summary" : "Adds/updates the node policy",
        "description" : "Adds or updates the policy of a node. This is called by the node or owning user.",
        "operationId" : "nodePutPolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "noheartbeat",
          "in" : "query",
          "description" : "If set to 'true', skip the step to update the node's lastHeartbeat field.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutNodePolicyRequest"
              },
              "example" : "{\n  \"label\": \"human readable name of the node policy\",  // this will be displayed in the UI\n  \"description\": \"descriptive text\",\n  \"properties\": [\n    {\n      \"name\": \"mypurpose\",\n      \"value\": \"myservice-testing\"\n      \"type\": \"string\"              // (optional) [boolean, float, int, list of strings, string, version]\n    }\n  ],\n  \"constraints\": [\n    \"a == b\"\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node/policy" ],
        "summary" : "Deletes the policy of a node",
        "description" : "Deletes the policy of a node. Can be run by the owning user or the node.",
        "operationId" : "nodeDeletePolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/status" : {
      "get" : {
        "tags" : [ "node/status" ],
        "summary" : "Returns the node status",
        "description" : "Returns the node run time status, for example service container status. Can be run by a user or the node.",
        "operationId" : "nodeGetStatusRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeStatus"
                },
                "example" : {
                  "connectivity" : {
                    "string" : true
                  },
                  "services" : [ {
                    "agreementId" : "string",
                    "serviceUrl" : "string",
                    "orgid" : "string",
                    "version" : "string",
                    "arch" : "string",
                    "containerStatus" : [ ],
                    "operatorStatus" : { },
                    "configState" : "string"
                  } ],
                  "runningServices" : "|orgid/serviceid|",
                  "lastUpdated" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "node/status" ],
        "summary" : "Adds/updates the node status",
        "description" : "Adds or updates the run time status of a node. This is called by the node or owning user.",
        "operationId" : "nodePutStatusRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutNodeStatusRequest"
              },
              "example" : "{\n  \"connectivity\": {   // (optional)\n    \"string\": true\n  },\n  \"services\": [\n    {\n      \"agreementId\": \"78d7912aafb6c11b7a776f77d958519a6dc718b9bd3da36a1442ebb18fe9da30\",\n      \"serviceUrl\":\"mydomain.com.location\",\n      \"orgid\":\"ling.com\",\n      \"version\":\"1.2\",\n      \"arch\":\"amd64\",\n      \"containerStatus\": [\n        {\n          \"name\": \"/dc23c045eb64e1637d027c4b0236512e89b2fddd3f06290c7b2354421d9d8e0d-location\",\n          \"image\": \"summit.hovitos.engineering/x86/location:v1.2\",\n          \"created\": 1506086099,\n          \"state\": \"running\"\n        }\n      ],\n      \"operatorStatus\": {}, // (optional)\n      \"configState\": \"active\" // (optional)\n    }\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node/status" ],
        "summary" : "Deletes the status of a node",
        "description" : "Deletes the status of a node. Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteStatusRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/errors" : {
      "get" : {
        "tags" : [ "node/error" ],
        "summary" : "Returns the node errors",
        "description" : "Returns any node errors. Can be run by any user or the node.",
        "operationId" : "nodeGetErrorsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NodeError"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "node/error" ],
        "summary" : "Adds/updates node error list",
        "description" : "Adds or updates any error of a node. This is called by the node or owning user.",
        "operationId" : "nodePutErrorsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutNodeErrorRequest"
              },
              "example" : "{\n  errors: [\n   {\n     record_id: \"string\",\n     message: \"string\",\n     event_code: \"string\",\n     hidden: boolean\n   },\n    ...\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node/error" ],
        "summary" : "Deletes the error list of a node",
        "description" : "Deletes the error list of a node. Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteErrorsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/heartbeat" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Tells the exchange this node is still operating",
        "description" : "Lets the exchange know this node is still active so it is still a candidate for contracting. Can be run by the owning user or the node.",
        "operationId" : "nodeHeartbeatRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}" : {
      "get" : {
        "tags" : [ "node" ],
        "summary" : "Returns a node",
        "description" : "Returns the node (edge device) with the specified id. Can be run by that node, a user, or an agbot.",
        "operationId" : "nodeGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attribute",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified, and it must be 1 of the direct attributes of the node resource (not of the services). If not specified, the entire node resource (including services) will be returned",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodesResponse"
                },
                "example" : {
                  "nodes" : {
                    "orgid/nodeid" : {
                      "token" : "string",
                      "name" : "string",
                      "owner" : "string",
                      "nodeType" : "device",
                      "pattern" : "",
                      "registeredServices" : [ {
                        "url" : "string",
                        "numAgreements" : 0,
                        "configState" : "active",
                        "policy" : "",
                        "properties" : [ ]
                      }, {
                        "url" : "string",
                        "numAgreements" : 0,
                        "configState" : "active",
                        "policy" : "",
                        "properties" : [ ]
                      }, {
                        "url" : "string",
                        "numAgreements" : 0,
                        "configState" : "active",
                        "policy" : "",
                        "properties" : [ ]
                      } ],
                      "userInput" : [ {
                        "serviceOrgid" : "string",
                        "serviceUrl" : "string",
                        "serviceArch" : "string",
                        "serviceVersionRange" : "string",
                        "inputs" : [ {
                          "name" : "var1",
                          "value" : "someString"
                        }, {
                          "name" : "var2",
                          "value" : 5
                        }, {
                          "name" : "var3",
                          "value" : 22.2
                        } ]
                      } ],
                      "msgEndPoint" : "",
                      "softwareVersions" : { },
                      "lastHeartbeat" : "string",
                      "publicKey" : "string",
                      "arch" : "string",
                      "heartbeatIntervals" : {
                        "minInterval" : 0,
                        "maxInterval" : 0,
                        "intervalAdjustment" : 0
                      },
                      "lastUpdated" : "string"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "node" ],
        "summary" : "Add/updates a node",
        "description" : "Adds a new edge node, or updates an existing node. This must be called by the user to add a node, and then can be called by that user or node to update itself.",
        "operationId" : "nodePutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "noheartbeat",
          "in" : "query",
          "description" : "If set to 'true', skip the step to update the lastHeartbeat field.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutNodesRequest"
              },
              "example" : "{\n  \"token\": \"abc\",                // node token, set by user when adding this node.\n  \"name\": \"rpi3\",                // node name that you pick\n  \"nodeType\": \"device\",          // the type of edge node: device, or cluster\n  \"pattern\": \"myorg/mypattern\",  // (optional) points to a pattern resource that defines what services should be deployed to this type of node\n  \"arch\": \"arm\",                 // specifies the architecture of the node\n  \"registeredServices\": [        // list of data services you want to make available (optional section)\n    {\n      \"url\": \"IBM/github.com.open-horizon.examples.cpu\", \n      \"numAgreements\": 1,                                 // for now always set this to 1\n      \"policy\": \"{...}\"                                   // the service policy file content as a json string blob\n      \"properties\": [                                     // list of properties to help agbots search for this, or requirements on the agbot\n        {\n          \"name\": \"arch\",        // must at least include arch and version properties\n          \"value\": \"arm\",        // [arm, x86, *, ...] should always be a string (even for boolean and int). Use \"*\" for wildcard\n          \"propType\": \"string\",  // [string, list, version, boolean, int, wildcard]\n          \"op\": \"=\"              // [=, >=, <=, in] must use the same op as the agbot search\n        }\n      ]\n    }\n  ],\n  // Override or set user input variables that are defined in the services used by this node. (optional section)\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  \"msgEndPoint\": \"\",                         // not currently used, but may be in the future. Leave empty or omit to use the built-in Exchange msg service (optional field)\n  \"softwareVersions\": {\"horizon\": \"1.2.3\"},  // various software versions on the node, can omit (optional field)\n  \"publicKey\": \"ABCDEF\",                     // used by agbots to encrypt msgs sent to this node using the built-in Exchange msg service\n  \"heartbeatIntervals\": {                    // All values in seconds. This section can be omitted (optional section)\n    \"minInterval\": 10,                       // the initial heartbeat interval\n    \"maxInterval\": 120,                      // the max the interval will ever become\n    \"intervalAdjustment\": 10                 // how much to increase the interval if there has been no activity for a while\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource add/updated - response body:",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "node" ],
        "summary" : "Deletes a node",
        "description" : "Deletes a node (RPi), and deletes the agreements stored for this node (but does not actually cancel the agreements between the node and agbots). Can be run by the owning user or the node.",
        "operationId" : "nodeDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "node" ],
        "summary" : "Updates 1 attribute of a node",
        "description" : "Updates some attributes of a node. This can be called by the user or the node.",
        "operationId" : "nodePatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the following attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchNodesRequest"
              },
              "example" : "{\n  \"token\": \"abc\",                // node token, set by user when adding this node.\n  \"name\": \"rpi3\",                // node name that you pick\n  \"nodeType\": \"device\",          // the type of edge node: device, or cluster\n  \"pattern\": \"myorg/mypattern\",  // points to a pattern resource that defines what services should be deployed to this type of node\n  \"arch\": \"arm\",                 // specifies the architecture of the node\n  \"registeredServices\": [        // list of data services you want to make available\n    {\n      \"url\": \"IBM/github.com.open-horizon.examples.cpu\",\n      \"numAgreements\": 1,                                 // for now always set this to 1\n      \"policy\": \"{...}\"                                   // the service policy file content as a json string blob\n      \"properties\": [                                     // list of properties to help agbots search for this, or requirements on the agbot\n        {\n          \"name\": \"arch\",        // must at least include arch and version properties\n          \"value\": \"arm\",        // [arm, x86, *, ...] should always be a string (even for boolean and int). Use \"*\" for wildcard\n          \"propType\": \"string\",  // [string, list, version, boolean, int, wildcard]\n          \"op\": \"=\"              // [=, >=, <=, in] must use the same op as the agbot search\n        }\n      ]\n    }\n  ],\n  // Override or set user input variables that are defined in the services used by this node.\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  \"msgEndPoint\": \"\",                         // not currently used, but may be in the future. Leave empty or omit to use the built-in Exchange msg service\n  \"softwareVersions\": {\"horizon\": \"1.2.3\"},  // various software versions on the node, can omit\n  \"publicKey\": \"ABCDEF\",                     // used by agbots to encrypt msgs sent to this node using the built-in Exchange msg service\n  \"heartbeatIntervals\": {                    // All values in seconds. This section can be omitted\n    \"minInterval\": 10,                       // the initial heartbeat interval\n    \"maxInterval\": 120,                      // the max the interval will ever become\n    \"intervalAdjustment\": 10                 // how much to increase the interval if there has been no activity for a while\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes/{id}/services_configstate" : {
      "post" : {
        "tags" : [ "node" ],
        "summary" : "Changes config state of registered services",
        "description" : "Suspends (or resumes) 1 or more services on this edge node. Can be run by the node owner or the node.",
        "operationId" : "nodePostConfigStateRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the node to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostNodeConfigStateRequest"
              },
              "example" : "{\n  \"org\": \"myorg\",             // the org of services to be modified, or empty string for all orgs\n  \"url\": \"myserviceurl\",      // the url of services to be modified, or empty string for all urls\n  \"configState\": \"suspended\"  // [active, suspended]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/nodes" : {
      "get" : {
        "tags" : [ "node" ],
        "summary" : "Returns all nodes",
        "description" : "Returns all nodes (edge devices). Can be run by any user or agbot.",
        "operationId" : "nodesGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idfilter",
          "in" : "query",
          "description" : "Filter results to only include nodes with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Filter results to only include nodes with this name (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include nodes with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nodetype",
          "in" : "query",
          "description" : "Filter results to only include nodes with this nodeType ('device' or 'cluster')",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "arch",
          "in" : "query",
          "description" : "Filter results to only include nodes with this arch (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNodesResponse"
                },
                "example" : "{\n  \"nodes\": {\n    \"orgid/nodeid\": {\n      \"token\": \"string\",\n      \"name\": \"string\",\n      \"owner\": \"string\",\n      \"nodeType\": \"device\",\n      \"pattern\": \"\",\n      \"registeredServices\": [\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        },\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        },\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        }\n      ],\n      \"userInput\": [\n        {\n          \"serviceOrgid\": \"string\",\n          \"serviceUrl\": \"string\",\n          \"serviceArch\": \"string\",\n          \"serviceVersionRange\": \"string\",\n          \"inputs\": [\n            {\n              \"name\": \"var1\",\n              \"value\": \"someString\"\n            },\n            {\n              \"name\": \"var2\",\n              \"value\": 5\n            },\n            {\n              \"name\": \"var3\",\n              \"value\": 22.2\n            }\n          ]\n        }\n      ],\n      \"msgEndPoint\": \"\",\n      \"softwareVersions\": {},\n      \"lastHeartbeat\": \"string\",\n      \"publicKey\": \"string\",\n      \"arch\": \"string\",\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      },\n      \"lastUpdated\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/agreements/confirm" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Confirms if this agbot agreement is active",
        "description" : "Confirms whether or not this agreement id is valid, is owned by an agbot owned by this same username, and is a currently active agreement. Can only be run by an agbot or user.",
        "operationId" : "agbotAgreementConfirmRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the agbot to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostAgreementsConfirmRequest"
              },
              "example" : {
                "agreementId" : "ABCDEF"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/myorgs" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Returns the orgs a user can view",
        "description" : "Returns all the org definitions in the exchange that match the accounts the caller has access too. Can be run by any user. Request body is the response from /idmgmt/identity/api/v1/users/<user_ID>/accounts API.",
        "operationId" : "myOrgsPostRoute",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListObject"
              },
              "example" : [ {
                "id" : "<string-id-here>",
                "name" : "<string-account-name>",
                "description" : "String Description for Account",
                "createdOn" : "2020-09-15T00:20:43.853Z"
              }, {
                "id" : "<string-id-here>",
                "name" : "<string-account-name>",
                "description" : "String Description for Account",
                "createdOn" : "2020-09-15T00:20:43.853Z"
              } ]
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrgsResponse"
                },
                "example" : "{\n  \"orgs\": {\n    \"string\" : {\n      \"orgType\": \"\",\n      \"label\": \"\",\n      \"description\": \"\",\n      \"lastUpdated\": \"\",\n      \"tags\": null,\n      \"limits\": {\n        \"maxNodes\": 0\n      },\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      }\n    }.\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/changes/maxchangeid" : {
      "get" : {
        "tags" : [ "organization" ],
        "summary" : "Returns the max changeid of the resource changes",
        "description" : "Returns the max changeid of the resource changes. Can be run by any user, node, or agbot.",
        "operationId" : "orgsGetMaxChangeIdRoute",
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MaxChangeIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/changes" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Returns recent changes in this org",
        "description" : "Returns all the recent resource changes within an org that the caller has permissions to view.",
        "operationId" : "orgChangesRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceChangesRequest"
              },
              "example" : "{\n  \"changeId\": <number-here>,\n  \"lastUpdated\": \"<time-here>\",  // (optional) only use if the caller doesn't know what changeId to use\n  \"maxRecords\": <number-here>,   // (required) the maximum number of records the caller wants returned to them\n  \"orgList\": [\"\", \"\", \"\"]        // (optional) just for agbots, this should be the list of orgs the agbot is responsible for\n}"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "changes returned - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceChangesRespObject"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/search/nodehealth" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Returns agreement health of nodes with no pattern",
        "description" : "Returns the lastHeartbeat and agreement times for all nodes in this org that do not have a pattern and have changed since the specified lastTime. Can be run by a user or agbot (but not a node).",
        "operationId" : "orgPostNodesHealthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostNodeHealthRequest"
              },
              "example" : "{\n  \"lastTime\": \"2017-09-28T13:51:36.629Z[UTC]\"  // only return nodes that have changed since this time, empty string returns all\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostNodeHealthResponse"
                },
                "example" : "{\n  \"nodes\": {\n    \"string\": {\n      \"lastHeartbeat\": \"string\",\n      \"agreements\": {\n        \"string\": {\n          \"lastUpdated\": \"string\"\n        },\n          ...\n      }\n    },\n      ...\n  }\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/search/nodes/service" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Returns the nodes a service is running on",
        "description" : "Returns a list of all the nodes a service is running on. Can be run by a user or agbot (but not a node).",
        "operationId" : "orgPostNodesServiceRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostServiceSearchRequest"
              },
              "example" : "{\n  \"orgid\": \"string\",          // orgid of the service to be searched on\n  \"serviceURL\": \"string\",\n  \"serviceVersion\": \"string\",\n  \"serviceArch\": \"string\"\n}"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostServiceSearchResponse"
                },
                "example" : {
                  "nodes" : [ {
                    "string" : "string"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/search/nodes/error/all" : {
      "get" : {
        "tags" : [ "organization" ],
        "summary" : "Returns all node errors",
        "description" : "Returns a list of all the node errors for an organization (that the caller has access to see) in an error state. Can be run by a user or agbot.",
        "operationId" : "nodeGetAllErrorsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AllNodeErrorsInOrgResp"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/search/nodes/error" : {
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Returns nodes in an error state",
        "description" : "Returns a list of the id's of nodes in an error state. Can be run by a user or agbot (but not a node). No request body is currently required.",
        "operationId" : "orgPostNodesErrorRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostNodeErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}" : {
      "get" : {
        "tags" : [ "organization" ],
        "summary" : "Returns an org",
        "description" : "Returns the org with the specified id. Can be run by any user in this org or a hub admin.",
        "operationId" : "orgGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attribute",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire org resource will be returned.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrgsResponse"
                },
                "example" : {
                  "orgs" : {
                    "string" : {
                      "orgType" : "",
                      "label" : "Test Org",
                      "description" : "No",
                      "lastUpdated" : "2020-08-25T14:04:21.707Z[UTC]",
                      "tags" : {
                        "cloud_id" : ""
                      },
                      "limits" : {
                        "maxNodes" : 0
                      },
                      "heartbeatIntervals" : {
                        "minInterval" : 0,
                        "maxInterval" : 0,
                        "intervalAdjustment" : 0
                      }
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "organization" ],
        "summary" : "Updates an org",
        "description" : "Does a full replace of an existing org. This can only be called by root, a hub admin, or a user in the org with the admin role.",
        "operationId" : "orgPutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Does a full replace of an existing org.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutOrgRequest"
              },
              "example" : "{\n  \"orgType\": \"my org type\",   // (optional)\n  \"label\": \"My org\",\n  \"description\": \"blah blah\",\n  \"tags\": {   // (optional)\n    \"cloud_id\": \"<account-id-here>\"\n  },\n  \"limits\": { // optional\n    \"maxNodes\": 50\n  },\n  \"heartbeatIntervals\": {     // default values (in seconds) if not set in the node resource. This section can be omitted\n    \"minInterval\": 10,        // the initial heartbeat interval\n    \"maxInterval\": 120,       // the max the interval will ever become\n    \"intervalAdjustment\": 10  // how much to increase the interval if there has been no activity for a while\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "organization" ],
        "summary" : "Adds an org",
        "description" : "Creates an org resource. This can only be called by the root user or a hub admin.",
        "operationId" : "orgPostRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutOrgRequest"
              },
              "example" : "{\n  \"orgType\": \"my org type\",   // (optional)\n  \"label\": \"My org\",\n  \"description\": \"blah blah\",\n  \"tags\": {   // (optional)\n    \"ibmcloud_id\": \"abc123def456\",\n    \"cloud_id\": \"<account-id-here>\"\n  },\n  \"limits\": { // optional\n    \"maxNodes\": 50\n  },\n  \"heartbeatIntervals\": {     // default values (in seconds) if not set in the node resource. This section can be omitted\n    \"minInterval\": 10,        // the initial heartbeat interval\n    \"maxInterval\": 120,       // the max the interval will ever become\n    \"intervalAdjustment\": 10  // how much to increase the interval if there has been no activity for a while\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "organization" ],
        "summary" : "Deletes an org",
        "description" : "Deletes an org. This can only be called by root or a hub admin.",
        "operationId" : "orgDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "organization" ],
        "summary" : "Updates 1 attribute of an org",
        "description" : "Updates one attribute of a org. This can only be called by root, a hub admin, or a user in the org with the admin role.",
        "operationId" : "orgPatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the attributes:",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutOrgRequest"
              },
              "example" : "{\n  \"orgType\": \"my org type\",\n  \"label\": \"My org\",\n  \"description\": \"blah blah\",\n  \"tags\": {\n    \"cloud_id\": \"<account-id-here>\"\n  },\n  \"limits\": {\n    \"maxNodes\": 0\n  },\n  \"heartbeatIntervals\": {     // default values (in seconds) if not set in the node resource. This section can be omitted\n    \"minInterval\": 10,        // the initial heartbeat interval\n    \"maxInterval\": 120,       // the max the interval will ever become\n    \"intervalAdjustment\": 10  // how much to increase the interval if there has been no activity for a while\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs" : {
      "get" : {
        "tags" : [ "organization" ],
        "summary" : "Returns all orgs",
        "description" : "Returns some or all org definitions. Can be run by any user if filter orgType=IBM is used, otherwise can only be run by the root user or a hub admin.",
        "operationId" : "orgsGetRoute",
        "parameters" : [ {
          "name" : "orgtype",
          "in" : "query",
          "description" : "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "IBM" ]
              }
            }
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "Filter results to only include orgs with this label (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetOrgsResponse"
                },
                "example" : "{\n  \"orgs\": {\n    \"string\" : {\n      \"orgType\": \"\",\n      \"label\": \"\",\n      \"description\": \"\",\n      \"lastUpdated\": \"\",\n      \"tags\": null,\n      \"limits\": {\n        \"maxNodes\": 0\n      },\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      }\n    }.\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns/{pattern}/keys/{keyid}" : {
      "get" : {
        "tags" : [ "pattern/key" ],
        "summary" : "Returns a key/cert for this pattern",
        "description" : "Returns the signing public key/cert with the specified keyid for this pattern. The raw content of the key/cert is returned, not json. Can be run by any credentials able to view the pattern.",
        "operationId" : "patternGetKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "Signing public key/certificate identifier.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "pattern/key" ],
        "summary" : "Adds/updates a key/cert for the pattern",
        "description" : "Adds a new signing public key/cert, or updates an existing key/cert, for this pattern. This can only be run by the pattern owning user.",
        "operationId" : "patternPutKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "ID of the pattern to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "ID of the key to be added/updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Note that the input body is just the bytes of the key/cert (not the typical json), so the 'Content-Type' header must be set to 'text/plain'.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutPatternKeyRequest"
              },
              "example" : "{\n  \"key\": \"string\",\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "pattern/key" ],
        "summary" : "Deletes a key of a pattern",
        "description" : "Deletes a key/cert for this pattern. This can only be run by the pattern owning user.",
        "operationId" : "patternDeleteKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "ID of the key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns/{pattern}/keys" : {
      "get" : {
        "tags" : [ "pattern/key" ],
        "summary" : "Returns all keys/certs for this pattern",
        "description" : "Returns all the signing public keys/certs for this pattern. Can be run by any credentials able to view the pattern.",
        "operationId" : "patternGetKeysRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListObject"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "pattern/key" ],
        "summary" : "Deletes all keys of a pattern",
        "description" : "Deletes all of the current keys/certs for this pattern. This can only be run by the pattern owning user.",
        "operationId" : "patternDeleteKeysRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns/{pattern}/nodehealth" : {
      "post" : {
        "tags" : [ "pattern" ],
        "summary" : "Returns agreement health of nodes of a particular pattern",
        "description" : "Returns the lastHeartbeat and agreement times for all nodes that are this pattern and have changed since the specified lastTime. Can be run by a user or agbot (but not a node).",
        "operationId" : "patternNodeHealthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostNodeHealthRequest"
              },
              "example" : "{\n  \"lastTime\": \"2017-09-28T13:51:36.629Z[UTC]\",   // only return nodes that have changed since this time, empty string returns all\n  \"nodeOrgids\": [\"org1\", \"org2\", \"...\"]          // if not specified, defaults to the same org the pattern is in\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostNodeHealthResponse"
                },
                "example" : "{\n  \"nodes\": {\n    \"string\": {\n      \"lastHeartbeat\": \"string\",\n      \"agreements\": {\n        \"string\": {\n          \"lastUpdated\": \"string\"\n        },\n          ...\n      }\n    },\n      ...\n  }\n}\n"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns/{pattern}/search" : {
      "post" : {
        "tags" : [ "pattern" ],
        "summary" : "Returns matching nodes of a particular pattern",
        "description" : "Returns the matching nodes that are using this pattern and do not already have an agreement for the specified service. Can be run by a user or agbot (but not a node).",
        "operationId" : "patternPostSearchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPatternSearchRequest"
              },
              "example" : "{\n  \"arch\": \"arm\",                            // (optional), Defaults to all architectures\n  \"nodeOrgids\": [ \"org1\", \"org2\", \"...\" ],  // (optional), Defaults to the same org the pattern is in\n  \"secondsStale\": 60,                       // (optional), Maximum number of seconds since the last heartbeat from a node\n  \"serviceUrl\": \"myorg/mydomain.com.sdr\"    // The service that the node does not have an agreement with yet. Composite service url (organization/service)\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostPatternSearchResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns/{pattern}" : {
      "get" : {
        "tags" : [ "pattern" ],
        "summary" : "Returns a pattern",
        "description" : "Returns the pattern with the specified id. Can be run by a user, node, or agbot.",
        "operationId" : "patternGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attribute",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire pattern resource will be returned",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPatternsResponse"
                },
                "example" : {
                  "patterns" : {
                    "orgid/patternname" : {
                      "owner" : "string",
                      "label" : "My Pattern",
                      "description" : "blah blah",
                      "public" : true,
                      "services" : [ {
                        "serviceUrl" : "string",
                        "serviceOrgid" : "string",
                        "serviceArch" : "string",
                        "agreementLess" : false,
                        "serviceVersions" : [ {
                          "version" : "4.5.6",
                          "deployment_overrides" : "string",
                          "deployment_overrides_signature" : "a",
                          "priority" : {
                            "priority_value" : 50,
                            "retries" : 1,
                            "retry_durations" : 3600,
                            "verified_durations" : 52
                          },
                          "upgradePolicy" : {
                            "lifecycle" : "immediate",
                            "time" : "01:00AM"
                          }
                        } ],
                        "dataVerification" : {
                          "metering" : {
                            "tokens" : 1,
                            "per_time_unit" : "min",
                            "notification_interval" : 30
                          },
                          "URL" : "",
                          "enabled" : true,
                          "interval" : 240,
                          "check_rate" : 15,
                          "user" : "",
                          "password" : ""
                        },
                        "nodeHealth" : {
                          "missing_heartbeat_interval" : 600,
                          "check_agreement_status" : 120
                        }
                      } ],
                      "userInput" : [ ],
                      "agreementProtocols" : [ {
                        "name" : "Basic"
                      } ],
                      "lastUpdated" : "2019-05-14T16:34:34.194Z[UTC]"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "pattern" ],
        "summary" : "Adds a pattern",
        "description" : "Creates a pattern resource. A pattern resource specifies all of the services that should be deployed for a type of node. When a node registers with Horizon, it can specify a pattern name to quickly tell Horizon what should be deployed on it. This can only be called by a user.",
        "operationId" : "patternPuttRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "See details in the POST route.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutPatternRequest"
              },
              "example" : "{\n  \"label\": \"name of the edge pattern\",  // this will be displayed in the node registration UI\n  \"description\": \"descriptive text\",    // optional\n  \"public\": false,                      // typically patterns are not appropriate to share across orgs because they contain policy choices\n  // The services that should be deployed to the edge for this pattern. (The services must exist before creating this pattern.)\n  \"services\": [\n    {\n      \"serviceUrl\": \"mydomain.com.weather\",\n      \"serviceOrgid\": \"myorg\",\n      \"serviceArch\": \"amd64\",\n      \"agreementLess\": false,                // only set to true if the same svc is both top level and required by another svc (optional)\n      // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n      \"serviceVersions\": [\n        {\n          \"version\": \"1.0.1\",\n          \"deployment_overrides\": \"{\\\"services\\\":{\\\"location\\\":{\\\"environment\\\":[\\\"USE_NEW_STAGING_URL=false\\\"]}}}\",\n          \"deployment_overrides_signature\": \"\",  // filled in by the Horizon signing process\n          \"priority\": {                          // can be omitted\n            \"priority_value\": 50,\n            \"retries\": 1,\n            \"retry_durations\": 3600,\n            \"verified_durations\": 52\n          },\n          // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n          \"upgradePolicy\": {           // can be omitted\n            \"lifecycle\": \"immediate\",\n            \"time\": \"01:00AM\"          // reserved for future use\n          }\n        }\n      ],\n      // Fill in this section if the Horizon agbot should run a REST API of the cloud data ingest service to confirm the service is sending data.\n      // If not using this, the dataVerification field can be set to {} or omitted completely.\n      \"dataVerification\": {            // can be omitted\n        \"enabled\": true,\n        \"URL\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"interval\": 480,\n        \"check_rate\": 15,\n        \"metering\": {\n          \"tokens\": 1,\n          \"per_time_unit\": \"min\",\n          \"notification_interval\": 30\n        }\n      },\n      // If not using agbot node health check, this field can be set to {} or omitted completely.\n      \"nodeHealth\": {                       // can be omitted\n        \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n        \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n      }\n    }\n  ],\n  // Override or set user input variables that are defined in the services used by this pattern.\n  \"userInput\": [                                  // optional section\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  // The Horizon agreement protocol(s) to use. \"Basic\" means make agreements w/o a blockchain. \"Citizen Scientist\" means use ethereum to record the agreement.\n  \"agreementProtocols\": [  // can be omitted\n    {\n      \"name\": \"Basic\"\n    }\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "pattern" ],
        "summary" : "Adds a pattern",
        "description" : "Creates a pattern resource. A pattern resource specifies all of the services that should be deployed for a type of node. When a node registers with Horizon, it can specify a pattern name to quickly tell Horizon what should be deployed on it. This can only be called by a user.",
        "operationId" : "patternPostRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutPatternRequest"
              },
              "example" : "{\n  \"label\": \"name of the edge pattern\",  // this will be displayed in the node registration UI\n  \"description\": \"descriptive text\",    // optional\n  \"public\": false,                      // typically patterns are not appropriate to share across orgs because they contain policy choices\n  // The services that should be deployed to the edge for this pattern. (The services must exist before creating this pattern.)\n  \"services\": [\n    {\n      \"serviceUrl\": \"mydomain.com.weather\",\n      \"serviceOrgid\": \"myorg\",\n      \"serviceArch\": \"amd64\",\n      \"agreementLess\": false,                // only set to true if the same svc is both top level and required by another svc (optional)\n      // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n      \"serviceVersions\": [\n        {\n          \"version\": \"1.0.1\",\n          \"deployment_overrides\": \"{\\\"services\\\":{\\\"location\\\":{\\\"environment\\\":[\\\"USE_NEW_STAGING_URL=false\\\"]}}}\",\n          \"deployment_overrides_signature\": \"\",  // filled in by the Horizon signing process\n          \"priority\": {                          // can be omitted\n            \"priority_value\": 50,\n            \"retries\": 1,\n            \"retry_durations\": 3600,\n            \"verified_durations\": 52\n          },\n          // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n          \"upgradePolicy\": {           // can be omitted\n            \"lifecycle\": \"immediate\",\n            \"time\": \"01:00AM\"          // reserved for future use\n          }\n        }\n      ],\n      // Fill in this section if the Horizon agbot should run a REST API of the cloud data ingest service to confirm the service is sending data.\n      // If not using this, the dataVerification field can be set to {} or omitted completely.\n      \"dataVerification\": {            // can be omitted\n        \"enabled\": true,\n        \"URL\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"interval\": 480,\n        \"check_rate\": 15,\n        \"metering\": {\n          \"tokens\": 1,\n          \"per_time_unit\": \"min\",\n          \"notification_interval\": 30\n        }\n      },\n      // If not using agbot node health check, this field can be set to {} or omitted completely.\n      \"nodeHealth\": {                       // can be omitted\n        \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n        \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n      }\n    }\n  ],\n  // Override or set user input variables that are defined in the services used by this pattern.\n  \"userInput\": [                            // optional section\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  // The Horizon agreement protocol(s) to use. \"Basic\" means make agreements w/o a blockchain. \"Citizen Scientist\" means use ethereum to record the agreement.\n  \"agreementProtocols\": [  // can be omitted\n    {\n      \"name\": \"Basic\"\n    }\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "pattern" ],
        "summary" : "Deletes a pattern",
        "description" : "Deletes a pattern. Can only be run by the owning user.",
        "operationId" : "patternDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "pattern" ],
        "summary" : "Updates 1 attribute of a pattern",
        "description" : "Updates one attribute of a pattern. This can only be called by the user that originally created this pattern resource.",
        "operationId" : "patternPatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pattern",
          "in" : "path",
          "description" : "Pattern name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchPatternRequest"
              },
              "example" : "{\n  \"label\": \"name of the edge pattern\",  // this will be displayed in the node registration UI\n  \"description\": \"descriptive text\",\n  \"public\": false,                      // typically patterns are not appropriate to share across orgs because they contain policy choices\n  // The services that should be deployed to the edge for this pattern. (The services must exist before creating this pattern.)\n  \"services\": [\n    {\n      \"serviceUrl\": \"mydomain.com.weather\",\n      \"serviceOrgid\": \"myorg\",\n      \"serviceArch\": \"amd64\",\n      \"agreementLess\": false,                // only set to true if the same svc is both top level and required by another svc\n      // If multiple service versions are listed, Horizon will try to automatically upgrade nodes to the version with the lowest priority_value number\n      \"serviceVersions\": [\n        {\n          \"version\": \"1.0.1\",\n          \"deployment_overrides\": \"{\\\"services\\\":{\\\"location\\\":{\\\"environment\\\":[\\\"USE_NEW_STAGING_URL=false\\\"]}}}\",\n          \"deployment_overrides_signature\": \"\",  // filled in by the Horizon signing process\n          \"priority\": {                          // can be omitted\n            \"priority_value\": 50,\n            \"retries\": 1,\n            \"retry_durations\": 3600,\n            \"verified_durations\": 52\n          },\n          // When Horizon should upgrade nodes to newer service versions. Can be set to {} to take the default of immediate.\n          \"upgradePolicy\": {           // can be omitted\n            \"lifecycle\": \"immediate\",\n            \"time\": \"01:00AM\"          // reserved for future use\n          }\n        }\n      ],\n      // Fill in this section if the Horizon agbot should run a REST API of the cloud data ingest service to confirm the service is sending data.\n      // If not using this, the dataVerification field can be set to {} or omitted completely.\n      \"dataVerification\": {            // can be omitted\n        \"enabled\": true,\n        \"URL\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"interval\": 480,\n        \"check_rate\": 15,\n        \"metering\": {\n          \"tokens\": 1,\n          \"per_time_unit\": \"min\",\n          \"notification_interval\": 30\n        }\n      },\n      // If not using agbot node health check, this field can be set to {} or omitted completely.\n      \"nodeHealth\": {                       // can be omitted\n        \"missing_heartbeat_interval\": 600,  // How long a node heartbeat can be missing before cancelling its agreements (in seconds)\n        \"check_agreement_status\": 120       // How often to check that the node agreement entry still exists, and cancel agreement if not found (in seconds)\n      }\n    }\n  ],\n  // Override or set user input variables that are defined in the services used by this pattern.\n  \"userInput\": [\n    {\n      \"serviceOrgid\": \"IBM\",\n      \"serviceUrl\": \"ibm.cpu2msghub\",\n      \"serviceArch\": \"\",                          // omit or leave blank to mean all architectures\n      \"serviceVersionRange\": \"[0.0.0,INFINITY)\",  // or omit to mean all versions\n      \"inputs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ]\n    }\n  ],\n  // The Horizon agreement protocol(s) to use. \"Basic\" means make agreements w/o a blockchain. \"Citizen Scientist\" means use ethereum to record the agreement.\n  \"agreementProtocols\": [  // can be omitted\n    {\n      \"name\": \"Basic\"\n    }\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/patterns" : {
      "get" : {
        "tags" : [ "pattern" ],
        "summary" : "Returns all patterns",
        "description" : "Returns all pattern definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId" : "patternsGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idfilter",
          "in" : "query",
          "description" : "Filter results to only include patterns with this id (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include patterns with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "public",
          "in" : "query",
          "description" : "Filter results to only include patterns with this public setting",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "label",
          "in" : "query",
          "description" : "Filter results to only include patterns with this label (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "Filter results to only include patterns with this description (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetPatternsResponse"
                },
                "example" : "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}/dockauths/{dockauthid}" : {
      "get" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Returns a docker image token for this service",
        "description" : "Returns the docker image authentication token with the specified dockauthid for this service. Can be run by any credentials able to view the service.",
        "operationId" : "serviceGetDockauthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dockauthid",
          "in" : "path",
          "description" : "ID of the dockauth.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDockAuth"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Updates a docker image token for the service",
        "description" : "Updates an existing docker image authentication token for this service. This can only be run by the service owning user.",
        "operationId" : "servicePutDockauthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dockauthid",
          "in" : "path",
          "description" : "ID of the dockauth.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "See the POST route for details.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutServiceDockAuthRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Deletes a docker image auth token of a service",
        "description" : "Deletes a docker image auth token for this service. This can only be run by the service owning user.",
        "operationId" : "serviceDeleteDockauthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dockauthid",
          "in" : "path",
          "description" : "ID of the dockauth.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}/dockauths" : {
      "get" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Returns all docker image tokens for this service",
        "description" : "Returns all the docker image authentication tokens for this service. Can be run by any credentials able to view the service.",
        "operationId" : "serviceGetDockauthsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListObject"
                },
                "example" : "\n  [\n    {\n      \"dockAuthId\": 0,\n      \"registry\": \"string\",\n      \"username\": \"string\",\n      \"token\": string,\n      \"lastUpdated\": string\n    },\n      ...\n  ]\n"
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Adds a docker image token for the service",
        "description" : "Adds a new docker image authentication token for this service. As an optimization, if a dockauth resource already exists with the same service, registry, username, and token, this method will just update that lastupdated field. This can only be run by the service owning user.",
        "operationId" : "servicePostDockauthRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutServiceDockAuthRequest"
              },
              "example" : "{\n  \"registry\": \"myregistry.com\",\n  \"username\": \"mydockeruser\",   // optional\n  \"token\": \"mydockertoken\"\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service/docker-authorization" ],
        "summary" : "Deletes all docker image auth tokens of a service",
        "description" : "Deletes all of the current docker image auth tokens for this service. This can only be run by the service owning user.",
        "operationId" : "serviceDeleteDockauthsRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}/keys/{keyid}" : {
      "get" : {
        "tags" : [ "service/key" ],
        "summary" : "Returns a key/cert for this service",
        "description" : "Returns the signing public key/cert with the specified keyid for this service. The raw content of the key/cert is returned, not json. Can be run by any credentials able to view the service.",
        "operationId" : "serviceGetKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "Key Id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "service/key" ],
        "summary" : "Adds/updates a key/cert for the service",
        "description" : "Adds a new signing public key/cert, or updates an existing key/cert, for this service. This can only be run by the service owning user.",
        "operationId" : "servicePutKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "ID of the key to be added/updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Note that the input body is just the bytes of the key/cert (not the typical json), so the 'Content-Type' header must be set to 'text/plain'.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutServiceKeyRequest"
              },
              "example" : "{\n  \"key\": \"string\",\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service/key" ],
        "summary" : "Deletes a key of a service",
        "description" : "Deletes a key/cert for this service. This can only be run by the service owning user.",
        "operationId" : "serviceDeleteKeyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyid",
          "in" : "path",
          "description" : "ID of the key.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}/keys" : {
      "get" : {
        "tags" : [ "service/key" ],
        "summary" : "Returns all keys/certs for this service",
        "description" : "Returns all the signing public keys/certs for this service. Can be run by any credentials able to view the service.",
        "operationId" : "serviceGetKeysRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListObject"
                },
                "example" : [ "mykey.pem" ]
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service/key" ],
        "summary" : "Deletes all keys of a service",
        "description" : "Deletes all of the current keys/certs for this service. This can only be run by the service owning user.",
        "operationId" : "serviceDeleteKeysRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}/policy" : {
      "get" : {
        "tags" : [ "service/policy" ],
        "summary" : "Returns the service policy",
        "description" : "Returns the service policy. Can be run by a user, node or agbot.",
        "operationId" : "serviceGetPolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServicePolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "service/policy" ],
        "summary" : "Adds/updates the service policy",
        "description" : "Adds or updates the policy of a service. This can be called by the owning user.",
        "operationId" : "servicePutPolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service to be updated.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutServicePolicyRequest"
              },
              "example" : "{\n  \"label\": \"human readable name of the service policy\",  // this will be displayed in the UI\n  \"description\": \"descriptive text\",\n  \"properties\": [\n    {\n      \"name\": \"mypurpose\",\n      \"value\": \"myservice-testing\"\n      \"type\": \"string\"              // (optional) [boolean, float, int, list of strings, string, version]\n    }\n  ],\n  \"constraints\": [\n    \"a == b\"\n  ]\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service/policy" ],
        "summary" : "Deletes the policy of a service",
        "description" : "Deletes the policy of a service. Can be run by the owning user.",
        "operationId" : "serviceDeletePolicyRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "ID of the service.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services/{service}" : {
      "get" : {
        "tags" : [ "service" ],
        "summary" : "Returns a service",
        "description" : "Returns the service with the specified id. Can be run by a user, node, or agbot.",
        "operationId" : "serviceGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attribute",
          "in" : "query",
          "description" : "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire service resource will be returned",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServicesResponse"
                },
                "example" : {
                  "services" : {
                    "orgid/servicename" : {
                      "owner" : "string",
                      "label" : "string",
                      "description" : "blah blah",
                      "public" : true,
                      "documentation" : "",
                      "url" : "string",
                      "version" : "1.2.3",
                      "arch" : "string",
                      "sharable" : "singleton",
                      "matchHardware" : { },
                      "requiredServices" : [ ],
                      "userInput" : [ ],
                      "deployment" : "string",
                      "deploymentSignature" : "string",
                      "clusterDeployment" : "",
                      "clusterDeploymentSignature" : "",
                      "imageStore" : { },
                      "lastUpdated" : "2019-05-14T16:20:40.221Z[UTC]"
                    },
                    "orgid/servicename2" : {
                      "owner" : "string",
                      "label" : "string",
                      "description" : "string",
                      "public" : true,
                      "documentation" : "",
                      "url" : "string",
                      "version" : "4.5.6",
                      "arch" : "string",
                      "sharable" : "singleton",
                      "matchHardware" : { },
                      "requiredServices" : [ {
                        "url" : "string",
                        "org" : "string",
                        "version" : "[1.0.0,INFINITY)",
                        "versionRange" : "[1.0.0,INFINITY)",
                        "arch" : "string"
                      } ],
                      "userInput" : [ {
                        "name" : "foo",
                        "label" : "The Foo Value",
                        "type" : "string",
                        "defaultValue" : "bar"
                      } ],
                      "deployment" : "string",
                      "deploymentSignature" : "string",
                      "clusterDeployment" : "",
                      "clusterDeploymentSignature" : "",
                      "imageStore" : { },
                      "lastUpdated" : "2019-05-14T16:20:40.680Z[UTC]"
                    },
                    "orgid/servicename3" : {
                      "owner" : "string",
                      "label" : "string",
                      "description" : "fake",
                      "public" : true,
                      "documentation" : "",
                      "url" : "string",
                      "version" : "string",
                      "arch" : "string",
                      "sharable" : "singleton",
                      "matchHardware" : { },
                      "requiredServices" : [ ],
                      "userInput" : [ ],
                      "deployment" : "",
                      "deploymentSignature" : "",
                      "clusterDeployment" : "",
                      "clusterDeploymentSignature" : "",
                      "imageStore" : { },
                      "lastUpdated" : "2019-12-13T15:38:57.679Z[UTC]"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "service" ],
        "summary" : "Updates a service",
        "description" : "Does a full replace of an existing service. See the description of the body fields in the POST method. This can only be called by the user that originally created it.",
        "operationId" : "servicePutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutServiceRequest"
              },
              "example" : "{\n  \"label\": \"Location for amd64\",                                                            // this will be displayed in the node registration UI\n  \"description\": \"blah blah\",\n  \"public\": true,                                                                           // whether or not it can be viewed by other organizations\n  \"documentation\": \"https://console.cloud.ibm.com/docs/services/edge-fabric/poc/sdr.html\",  // description of what this service does and how to use it\n  \"url\": \"github.com.open-horizon.examples.sdr2msghub\",                                     // the unique identifier of this service\n  \"version\": \"1.0.0\",\n  \"arch\": \"amd64\",\n  \"sharable\": \"singleton\",        // if multiple services require this service, how many instances are deployed: [\"exclusive\", \"singleton\", \"multiple\"]\n  // The other services this service requires. (The other services must exist in the exchange before creating this service.)\n  \"requiredServices\": [\n    {\n      \"org\": \"myorg\",\n      \"url\": \"mydomain.com.gps\",\n      \"version\": \"[1.0.0,INFINITY)\",  // an OSGI-formatted version range\n      \"arch\": \"amd64\"\n    }\n  ],\n  // Values the node owner will be prompted for and will be set as env vars to the container.\n  \"userInput\": [\n    {\n      \"name\": \"foo\",\n      \"label\": \"The Foo Value\",\n      \"type\": \"string\",          // [\"boolean\", \"float\", \"int\", \"list of strings\", \"string\"]\n      \"defaultValue\": \"bar\"      // if empty then the node owner must provide a value at registration time\n    }\n  ],\n  // Information about how to deploy the docker images for this service\n  \"deployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",         // container deployment info on edge devices. Can be omitted if does not apply\n  \"deploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                                 // filled in by the Horizon signing process\n  \"clusterDeployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",  // container deployment info on edge clusters. Can be omitted if does not apply\n  \"clusterDeploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                          // filled in by the Horizon signing process\n  \"imageStore\": {                                                                                                      // can be omitted\n    \"storeType\": \"dockerRegistry\"                                                                                      // dockerRegistry is the only supported value right now, and is the default\n  }\n}\n"
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "service" ],
        "summary" : "Deletes a service",
        "description" : "Deletes a service. Can only be run by the owning user.",
        "operationId" : "serviceDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "service" ],
        "summary" : "Updates 1 attribute of a service",
        "description" : "Updates one attribute of a service. This can only be called by the user that originally created this service resource.",
        "operationId" : "servicePatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchServiceRequest"
              },
              "example" : "{\n  \"label\": \"Location for amd64\",                                                            // this will be displayed in the node registration UI\n  \"description\": \"blah blah\",\n  \"public\": true,                                                                           // whether or not it can be viewed by other organizations\n  \"documentation\": \"https://console.cloud.ibm.com/docs/services/edge-fabric/poc/sdr.html\",  // description of what this service does and how to use it\n  \"url\": \"github.com.open-horizon.examples.sdr2msghub\",                                     // the unique identifier of this service\n  \"version\": \"1.0.0\",\n  \"arch\": \"amd64\",\n  \"sharable\": \"singleton\",        // if multiple services require this service, how many instances are deployed: [\"exclusive\", \"singleton\", \"multiple\"]\n  // The other services this service requires. (The other services must exist in the exchange before creating this service.)\n  \"requiredServices\": [\n    {\n      \"org\": \"myorg\",\n      \"url\": \"mydomain.com.gps\",\n      \"version\": \"[1.0.0,INFINITY)\",  // an OSGI-formatted version range\n      \"arch\": \"amd64\"\n    }\n  ],\n  // Values the node owner will be prompted for and will be set as env vars to the container.\n  \"userInput\": [\n    {\n      \"name\": \"foo\",\n      \"label\": \"The Foo Value\",\n      \"type\": \"string\",          // [\"boolean\", \"float\", \"int\", \"list of strings\", \"string\"]\n      \"defaultValue\": \"bar\"      // if empty then the node owner must provide a value at registration time\n    }\n  ],\n  // Information about how to deploy the docker images for this service\n  \"deployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",         // container deployment info on edge devices. Can be omitted if does not apply\n  \"deploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                                 // filled in by the Horizon signing process\n  \"clusterDeployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",  // container deployment info on edge clusters. Can be omitted if does not apply\n  \"clusterDeploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                          // filled in by the Horizon signing process\n  \"imageStore\": {                                                                                                      // can be omitted\n    \"storeType\": \"dockerRegistry\"                                                                                      // dockerRegistry is the only supported value right now, and is the default\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/services" : {
      "get" : {
        "tags" : [ "service" ],
        "summary" : "Returns all services",
        "description" : "Returns all service definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId" : "servicesGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "Filter results to only include services with this owner (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "public",
          "in" : "query",
          "description" : "Filter results to only include services with this public setting",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "description" : "Filter results to only include services with this url (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Filter results to only include services with this version (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "arch",
          "in" : "query",
          "description" : "Filter results to only include services with this arch (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nodetype",
          "in" : "query",
          "description" : "Filter results to only include services that are deployable on this nodeType. Valid values: devices or clusters",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requiredurl",
          "in" : "query",
          "description" : "Filter results to only include services that use this service with this url (can include % for wildcard - the URL encoding for % is %25)",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetServicesResponse"
                },
                "example" : "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "service" ],
        "summary" : "Adds a service",
        "description" : "A service resource contains the metadata that Horizon needs to deploy the docker images that implement this service. A service can either be an edge application, or a lower level edge service that provides access to sensors or reusable features. The service can require 1 or more other services that Horizon should also deploy when deploying this service. If public is set to true, the service can be shared across organizations. This can only be called by a user.",
        "operationId" : "servicePostRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutServiceRequest"
              },
              "example" : "{\n  \"label\": \"Location for amd64\",                                                            // this will be displayed in the node registration UI\n  \"description\": \"blah blah\",\n  \"public\": true,                                                                           // whether or not it can be viewed by other organizations\n  \"documentation\": \"https://console.cloud.ibm.com/docs/services/edge-fabric/poc/sdr.html\",  // description of what this service does and how to use it\n  \"url\": \"github.com.open-horizon.examples.sdr2msghub\",                                     // the unique identifier of this service\n  \"version\": \"1.0.0\",\n  \"arch\": \"amd64\",\n  \"sharable\": \"singleton\",        // if multiple services require this service, how many instances are deployed: [\"exclusive\", \"singleton\", \"multiple\"]\n  // The other services this service requires. (The other services must exist in the exchange before creating this service.)\n  \"requiredServices\": [\n    {\n      \"org\": \"myorg\",\n      \"url\": \"mydomain.com.gps\",\n      \"version\": \"[1.0.0,INFINITY)\",  // an OSGI-formatted version range\n      \"arch\": \"amd64\"\n    }\n  ],\n  // Values the node owner will be prompted for and will be set as env vars to the container.\n  \"userInput\": [\n    {\n      \"name\": \"foo\",\n      \"label\": \"The Foo Value\",\n      \"type\": \"string\",          // [\"boolean\", \"float\", \"int\", \"list of strings\", \"string\"]\n      \"defaultValue\": \"bar\"      // if empty then the node owner must provide a value at registration time\n    }\n  ],\n  // Information about how to deploy the docker images for this service\n  \"deployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",         // container deployment info on edge devices. Can be omitted if does not apply\n  \"deploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                                 // filled in by the Horizon signing process\n  \"clusterDeployment\": \"{\\\"services\\\":{\\\"location\\\":{\\\"image\\\":\\\"summit.hovitos.engineering/x86/location:2.0.6\\\"}}}\",  // container deployment info on edge clusters. Can be omitted if does not apply\n  \"clusterDeploymentSignature\": \"EURzSkDyk66qE6esYUDkLWLzM=\",                                                          // filled in by the Horizon signing process\n  \"imageStore\": {                                                                                                      // can be omitted\n    \"storeType\": \"dockerRegistry\"                                                                                      // dockerRegistry is the only supported value right now, and is the default\n  }\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/users/{username}/changepw" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Changes the user's password",
        "description" : "Changes the user's password. Only the user itself, root, or a user with admin privilege can update an existing user's password.",
        "operationId" : "userChangePwRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangePwRequest"
              },
              "example" : "{\n  \"newPassword\": \"abc\"  // the user password this user should have\n}"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "password updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/users/{username}/confirm" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Confirms if this username/password is valid",
        "description" : "Confirms whether or not this username exists and has the specified password. This can only be called by root or a user in the org with the admin role.",
        "operationId" : "userConfirmRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "post ok"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/users/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Returns a user",
        "description" : "Returns the specified username. Can only be run by that user or root.",
        "operationId" : "userGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUsersResponse"
                },
                "example" : {
                  "users" : {
                    "orgid/username" : {
                      "password" : "string",
                      "admin" : false,
                      "email" : "string",
                      "lastUpdated" : "string",
                      "updatedBy" : "string"
                    }
                  },
                  "lastIndex" : 0
                }
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updates a user",
        "description" : "Updates an existing user. Only the user itself, root, or a user with admin privilege can update an existing user.",
        "operationId" : "userPutRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "See details in the POST route.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutUsersRequest"
              },
              "example" : "{\n  \"password\": \"abc\",       // the user password this new user should have\n  \"admin\": false,          // if true, this user will have full privilege within the organization\n  \"email\": \"me@gmail.com\"  // contact email address for this user\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Adds a user",
        "description" : "Creates a new user. This can be run root/root, or a user with admin privilege.",
        "operationId" : "userPostRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostPutUsersRequest"
              },
              "example" : "{\n  \"password\": \"abc\",       // the user password this new user should have\n  \"admin\": false,          // if true, this user will have full privilege within the organization\n  \"email\": \"me@gmail.com\"  // contact email address for this user\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource created - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Deletes a user",
        "description" : "Deletes a user and all of its nodes and agbots. This can only be called by root or a user in the org with the admin role.",
        "operationId" : "userDeleteRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "deleted"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      },
      "patch" : {
        "tags" : [ "user" ],
        "summary" : "Updates 1 attribute of a user",
        "description" : "Updates 1 attribute of an existing user. Only the user itself, root, or a user with admin privilege can update an existing user.",
        "operationId" : "userPatchRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username of the user.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Specify only **one** of the attributes:",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchUsersRequest"
              },
              "example" : "{\n  \"password\": \"abc\",       // the user password this new user should have\n  \"admin\": false,          // if true, this user will have full privilege within the organization\n  \"email\": \"me@gmail.com\"  // contact email address for this user\n}\n"
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "resource updated - response body:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "bad input"
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    },
    "/v1/orgs/{orgid}/users" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Returns all users",
        "description" : "Returns all users. Can only be run by the root user, org admins, and hub admins.",
        "operationId" : "usersGetRoute",
        "parameters" : [ {
          "name" : "orgid",
          "in" : "path",
          "description" : "Organization id.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "response body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUsersResponse"
                },
                "example" : "{\n  \"users\": {\n    \"orgid/username\": {\n      \"password\": \"string\",\n      \"admin\": false,\n      \"email\": \"string\",\n      \"lastUpdated\": \"string\",\n      \"updatedBy\": \"string\"\n    },\n    \"orgid/username\": {\n      \"password\": \"string\",\n      \"admin\": false,\n      \"email\": \"string\",\n      \"lastUpdated\": \"string\",\n      \"updatedBy\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
              }
            }
          },
          "401" : {
            "description" : "invalid credentials"
          },
          "403" : {
            "description" : "access denied"
          },
          "404" : {
            "description" : "not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "NAService" : {
        "required" : [ "orgid", "url" ],
        "type" : "object",
        "properties" : {
          "orgid" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "PostPutServiceDockAuthRequest" : {
        "required" : [ "registry", "token" ],
        "type" : "object",
        "properties" : {
          "registry" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        }
      },
      "PostPatternSearchResponse" : {
        "required" : [ "lastIndex", "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/PatternNodeResponse"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Agbot" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "lastHeartbeat" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          }
        }
      },
      "Node" : {
        "required" : [ "registeredServices", "softwareVersions", "token", "userInput" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "registeredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/RegService"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "softwareVersions" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "lastHeartbeat" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "MapStringUser" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/User"
        }
      },
      "MaxChangeIdResponse" : {
        "required" : [ "maxChangeId" ],
        "type" : "object",
        "properties" : {
          "maxChangeId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PatchUsersRequest" : {
        "required" : [ "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string"
          },
          "admin" : {
            "type" : "object"
          },
          "hubAdmin" : {
            "type" : "object"
          },
          "email" : {
            "type" : "string"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "PostPutBusinessPolicyRequest" : {
        "required" : [ "jsonFormats", "label", "service" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/BService"
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "ResourceChangesInnerObject" : {
        "required" : [ "changeId", "lastUpdated" ],
        "type" : "object",
        "properties" : {
          "changeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PostNodeHealthResponse" : {
        "required" : [ "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/NodeHealthHashElement"
            }
          }
        }
      },
      "ListPatternNodeResponse" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/PatternNodeResponse"
        }
      },
      "AgbotBusinessPol" : {
        "required" : [ "businessPol", "businessPolOrgid", "lastUpdated", "nodeOrgid" ],
        "type" : "object",
        "properties" : {
          "businessPolOrgid" : {
            "type" : "string"
          },
          "businessPol" : {
            "type" : "string"
          },
          "nodeOrgid" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PostServiceSearchRequest" : {
        "required" : [ "orgid", "serviceArch", "serviceURL", "serviceVersion" ],
        "type" : "object",
        "properties" : {
          "orgid" : {
            "type" : "string"
          },
          "serviceURL" : {
            "type" : "string"
          },
          "serviceVersion" : {
            "type" : "string"
          },
          "serviceArch" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "ListPServiceVersions" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/PServiceVersions"
        }
      },
      "ListObject" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "type" : "object"
        }
      },
      "PutAgbotAgreementRequest" : {
        "required" : [ "service", "state" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "$ref" : "#/components/schemas/AAService"
          },
          "state" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PostNodesMsgsRequest" : {
        "required" : [ "message", "ttl" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "ttl" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MapStringString" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "type" : "string"
        }
      },
      "AdminDropdbTokenResponse" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          }
        }
      },
      "ListBServiceVersions" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/BServiceVersions"
        }
      },
      "MapStringAgbotAgreement" : {
        "required" : [ ],
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/AgbotAgreement"
        }
      },
      "PutNodeErrorRequest" : {
        "required" : [ "errors", "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "object"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "ListBusinessPolicyNodeResponse" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/BusinessPolicyNodeResponse"
        }
      },
      "MapStringObject" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "type" : "object"
        }
      },
      "PutNodePolicyRequest" : {
        "required" : [ "constraints", "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "PatternNodeResponse" : {
        "required" : [ "id", "nodeType", "publicKey" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          }
        }
      },
      "PServiceVersions" : {
        "required" : [ "priority", "upgradePolicy", "version" ],
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "deployment_overrides" : {
            "type" : "string"
          },
          "deployment_overrides_signature" : {
            "type" : "string"
          },
          "priority" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "upgradePolicy" : {
            "$ref" : "#/components/schemas/MapStringString"
          }
        }
      },
      "PostNodeConfigStateRequest" : {
        "required" : [ "configState", "jsonFormats", "org", "url" ],
        "type" : "object",
        "properties" : {
          "org" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "configState" : {
            "type" : "string"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "GetAgbotAgreementsResponse" : {
        "required" : [ "agreements", "lastIndex" ],
        "type" : "object",
        "properties" : {
          "agreements" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AgbotAgreement"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MapStringAgbotBusinessPol" : {
        "required" : [ ],
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/AgbotBusinessPol"
        }
      },
      "ServicePolicy" : {
        "required" : [ "constraints", "description", "label", "lastUpdated", "properties" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "GetAgbotsResponse" : {
        "required" : [ "agbots", "lastIndex" ],
        "type" : "object",
        "properties" : {
          "agbots" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Agbot"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PostPutUsersRequest" : {
        "required" : [ "admin", "email", "password" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string"
          },
          "admin" : {
            "type" : "boolean"
          },
          "hubAdmin" : {
            "type" : "object"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "ResourceChangesRequest" : {
        "required" : [ "changeId", "maxRecords", "orgList" ],
        "type" : "object",
        "properties" : {
          "changeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "maxRecords" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orgList" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "RegService" : {
        "required" : [ "numAgreements", "policy", "properties", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "numAgreements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "configState" : {
            "type" : "string"
          },
          "policy" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/Prop"
            }
          }
        }
      },
      "ListRegService" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/RegService"
        }
      },
      "ListOneUserInputService" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/OneUserInputService"
        }
      },
      "ListProp" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/Prop"
        }
      },
      "OrgLimits" : {
        "required" : [ "maxNodes" ],
        "type" : "object",
        "properties" : {
          "maxNodes" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ListBufferResourceChangesInnerObject" : {
        "required" : [ "first" ],
        "type" : "array",
        "properties" : {
          "first" : {
            "type" : "array",
            "properties" : { },
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceChangesInnerObject"
            }
          },
          "last0" : {
            "required" : [ "head", "next" ],
            "type" : "array",
            "properties" : {
              "head" : {
                "$ref" : "#/components/schemas/ResourceChangesInnerObject"
              },
              "next" : {
                "type" : "array",
                "properties" : { },
                "items" : {
                  "$ref" : "#/components/schemas/ResourceChangesInnerObject"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "traversableAgain" : {
                "type" : "boolean"
              }
            },
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceChangesInnerObject"
            }
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/ResourceChangesInnerObject"
        }
      },
      "MapStringOrg" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Org"
        }
      },
      "Tuple2StringOptionString" : {
        "required" : [ "_1", "_2" ],
        "type" : "object",
        "properties" : {
          "_1" : {
            "type" : "string"
          },
          "_2" : {
            "type" : "string"
          }
        }
      },
      "ListAgbotMsg" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/AgbotMsg"
        }
      },
      "$colon$colonNodeErrorsResp" : {
        "required" : [ "head", "next" ],
        "type" : "array",
        "properties" : {
          "head" : {
            "$ref" : "#/components/schemas/NodeErrorsResp"
          },
          "next" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/NodeErrorsResp"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "traversableAgain" : {
            "type" : "boolean"
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/NodeErrorsResp"
        }
      },
      "AgbotMsg" : {
        "required" : [ "message", "msgId", "nodeId", "nodePubKey", "timeExpires", "timeSent" ],
        "type" : "object",
        "properties" : {
          "msgId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nodeId" : {
            "type" : "string"
          },
          "nodePubKey" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "timeSent" : {
            "type" : "string"
          },
          "timeExpires" : {
            "type" : "string"
          }
        }
      },
      "GetNodeMsgsResponse" : {
        "required" : [ "lastIndex", "messages" ],
        "type" : "object",
        "properties" : {
          "messages" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/NodeMsg"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "AgbotAgreement" : {
        "required" : [ "dataLastReceived", "lastUpdated", "service", "state" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "$ref" : "#/components/schemas/AAService"
          },
          "state" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "dataLastReceived" : {
            "type" : "string"
          }
        }
      },
      "PostNodeErrorResponse" : {
        "required" : [ "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "NodePolicy" : {
        "required" : [ "constraints", "description", "label", "lastUpdated", "properties" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PostServiceSearchResponse" : {
        "required" : [ "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/Tuple2StringOptionString"
            }
          }
        }
      },
      "MapStringNodeHealthHashElement" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/NodeHealthHashElement"
        }
      },
      "MapStringAgbotPattern" : {
        "required" : [ ],
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/AgbotPattern"
        }
      },
      "Pattern" : {
        "required" : [ "agreementProtocols", "owner", "public", "services", "userInput" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "boolean"
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/PServices"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "agreementProtocols" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "NAgrService" : {
        "required" : [ "orgid", "pattern", "url" ],
        "type" : "object",
        "properties" : {
          "orgid" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "GetNodesResponse" : {
        "required" : [ "lastIndex", "nodes" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Node"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MapStringPattern" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Pattern"
        }
      },
      "GetServicesResponse" : {
        "required" : [ "lastIndex", "services" ],
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PostPutPatternRequest" : {
        "required" : [ "agreementProtocols", "jsonFormats", "label", "services" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "object"
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/PServices"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "agreementProtocols" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PatchServiceRequest" : {
        "required" : [ "jsonFormats", "matchHardware", "userInput" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "object"
          },
          "documentation" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "sharable" : {
            "type" : "string"
          },
          "matchHardware" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "requiredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ServiceRef"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "deployment" : {
            "type" : "string"
          },
          "deploymentSignature" : {
            "type" : "string"
          },
          "clusterDeployment" : {
            "type" : "string"
          },
          "clusterDeploymentSignature" : {
            "type" : "string"
          },
          "imageStore" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "AAService" : {
        "required" : [ "orgid", "pattern", "url" ],
        "type" : "object",
        "properties" : {
          "orgid" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          }
        }
      },
      "PostPatternSearchRequest" : {
        "required" : [ "nodeOrgids", "serviceUrl" ],
        "type" : "object",
        "properties" : {
          "arch" : {
            "type" : "string"
          },
          "nodeOrgids" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "numEntries" : {
            "type" : "string"
          },
          "secondsStale" : {
            "type" : "object"
          },
          "serviceUrl" : {
            "type" : "string"
          },
          "startIndex" : {
            "type" : "string"
          }
        }
      },
      "ListOneProperty" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/OneProperty"
        }
      },
      "BusinessPolicyNodeResponse" : {
        "required" : [ "id", "nodeType", "publicKey" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          }
        }
      },
      "ListResourceChangesInnerObject" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/ResourceChangesInnerObject"
        }
      },
      "ListBufferNodeErrorsResp" : {
        "required" : [ "first" ],
        "type" : "array",
        "properties" : {
          "first" : {
            "type" : "array",
            "properties" : { },
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/NodeErrorsResp"
            }
          },
          "last0" : {
            "required" : [ "head", "next" ],
            "type" : "array",
            "properties" : {
              "head" : {
                "$ref" : "#/components/schemas/NodeErrorsResp"
              },
              "next" : {
                "type" : "array",
                "properties" : { },
                "items" : {
                  "$ref" : "#/components/schemas/NodeErrorsResp"
                }
              },
              "empty" : {
                "type" : "boolean"
              },
              "traversableAgain" : {
                "type" : "boolean"
              }
            },
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/NodeErrorsResp"
            }
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/NodeErrorsResp"
        }
      },
      "ResourceChangesRespObject" : {
        "required" : [ "changes", "exchangeVersion", "hitMaxRecords", "mostRecentChangeId" ],
        "type" : "object",
        "properties" : {
          "changes" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ChangeEntry"
            }
          },
          "mostRecentChangeId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hitMaxRecords" : {
            "type" : "boolean"
          },
          "exchangeVersion" : {
            "type" : "string"
          }
        }
      },
      "PatchNodesRequest" : {
        "required" : [ "jsonFormats", "softwareVersions" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "registeredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/RegService"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "softwareVersions" : {
            "$ref" : "#/components/schemas/MapStringString"
          },
          "publicKey" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "ListNodeErrorsResp" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/NodeErrorsResp"
        }
      },
      "ListNodeMsg" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/NodeMsg"
        }
      },
      "ChangePwRequest" : {
        "required" : [ "newPassword" ],
        "type" : "object",
        "properties" : {
          "newPassword" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "AgbotPattern" : {
        "required" : [ "lastUpdated", "nodeOrgid", "pattern", "patternOrgid" ],
        "type" : "object",
        "properties" : {
          "patternOrgid" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "nodeOrgid" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PutNodeStatusRequest" : {
        "required" : [ "connectivity", "jsonFormats", "runningServices", "services" ],
        "type" : "object",
        "properties" : {
          "connectivity" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneService"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "runningServices" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "NodeHealthAgreementElement" : {
        "required" : [ "lastUpdated" ],
        "type" : "object",
        "properties" : {
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "ApiResponse" : {
        "required" : [ "code", "msg" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "msg" : {
            "type" : "string"
          }
        }
      },
      "GetBusinessPoliciesResponse" : {
        "required" : [ "businessPolicy", "lastIndex" ],
        "type" : "object",
        "properties" : {
          "businessPolicy" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/BusinessPolicy"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ContainerStatus" : {
        "required" : [ "created", "image", "name", "state" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "image" : {
            "type" : "string"
          },
          "created" : {
            "type" : "integer",
            "format" : "int32"
          },
          "state" : {
            "type" : "string"
          }
        }
      },
      "MapStringNodeAgreement" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/NodeAgreement"
        }
      },
      "ServiceDockAuth" : {
        "required" : [ "dockAuthId", "lastUpdated", "registry", "token", "username" ],
        "type" : "object",
        "properties" : {
          "dockAuthId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "registry" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "BService" : {
        "required" : [ "arch", "name", "org", "serviceVersions" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "org" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "serviceVersions" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/BServiceVersions"
            }
          },
          "nodeHealth" : {
            "$ref" : "#/components/schemas/MapStringObject"
          }
        }
      },
      "PutNodeAgreementRequest" : {
        "required" : [ "jsonFormats", "state" ],
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/NAService"
            }
          },
          "agreementService" : {
            "$ref" : "#/components/schemas/NAgrService"
          },
          "state" : {
            "type" : "string"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "PostBusinessPolicySearchRequest" : {
        "required" : [ "changedSince", "nodeOrgids" ],
        "type" : "object",
        "properties" : {
          "changedSince" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nodeOrgids" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "numEntries" : {
            "type" : "object"
          },
          "session" : {
            "type" : "string"
          },
          "startIndex" : {
            "type" : "string"
          }
        }
      },
      "GetNodeAgreementsResponse" : {
        "required" : [ "agreements", "lastIndex" ],
        "type" : "object",
        "properties" : {
          "agreements" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/NodeAgreement"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ListOneService" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/OneService"
        }
      },
      "Prop" : {
        "required" : [ "name", "op", "propType", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "propType" : {
            "type" : "string"
          },
          "op" : {
            "type" : "string"
          }
        }
      },
      "OneUserInputService" : {
        "required" : [ "inputs", "serviceOrgid", "serviceUrl" ],
        "type" : "object",
        "properties" : {
          "serviceOrgid" : {
            "type" : "string"
          },
          "serviceUrl" : {
            "type" : "string"
          },
          "serviceArch" : {
            "type" : "string"
          },
          "serviceVersionRange" : {
            "type" : "string"
          },
          "inputs" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputValue"
            }
          }
        }
      },
      "ListMapStringString" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/MapStringString"
        }
      },
      "ListOneUserInputValue" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/OneUserInputValue"
        }
      },
      "BusinessPolicy" : {
        "required" : [ "constraints", "owner", "properties", "userInput" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "service" : {
            "$ref" : "#/components/schemas/BService"
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string"
          }
        }
      },
      "GetPatternsResponse" : {
        "required" : [ "lastIndex", "patterns" ],
        "type" : "object",
        "properties" : {
          "patterns" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Pattern"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "MapStringBusinessPolicy" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/BusinessPolicy"
        }
      },
      "PostNodeHealthRequest" : {
        "required" : [ "lastTime", "nodeOrgids" ],
        "type" : "object",
        "properties" : {
          "lastTime" : {
            "type" : "string"
          },
          "nodeOrgids" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PServices" : {
        "required" : [ "serviceArch", "serviceOrgid", "serviceUrl", "serviceVersions" ],
        "type" : "object",
        "properties" : {
          "serviceUrl" : {
            "type" : "string"
          },
          "serviceOrgid" : {
            "type" : "string"
          },
          "serviceArch" : {
            "type" : "string"
          },
          "agreementLess" : {
            "type" : "object"
          },
          "serviceVersions" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/PServiceVersions"
            }
          },
          "dataVerification" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "nodeHealth" : {
            "$ref" : "#/components/schemas/MapStringObject"
          }
        }
      },
      "AllNodeErrorsInOrgResp" : {
        "required" : [ "nodeErrors" ],
        "type" : "object",
        "properties" : {
          "nodeErrors" : {
            "required" : [ "first" ],
            "type" : "array",
            "properties" : {
              "first" : {
                "type" : "array",
                "properties" : { },
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/NodeErrorsResp"
                }
              },
              "last0" : {
                "required" : [ "head", "next" ],
                "type" : "array",
                "properties" : {
                  "head" : {
                    "$ref" : "#/components/schemas/NodeErrorsResp"
                  },
                  "next" : {
                    "type" : "array",
                    "properties" : { },
                    "items" : {
                      "$ref" : "#/components/schemas/NodeErrorsResp"
                    }
                  },
                  "empty" : {
                    "type" : "boolean"
                  },
                  "traversableAgain" : {
                    "type" : "boolean"
                  }
                },
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/NodeErrorsResp"
                }
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/NodeErrorsResp"
            }
          }
        }
      },
      "ServiceRef" : {
        "required" : [ "arch", "org", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          },
          "org" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "versionRange" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          }
        }
      },
      "PostAgreementsConfirmRequest" : {
        "required" : [ "agreementId" ],
        "type" : "object",
        "properties" : {
          "agreementId" : {
            "type" : "string"
          }
        }
      },
      "MapStringAgbot" : {
        "required" : [ ],
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Agbot"
        }
      },
      "NodeStatus" : {
        "required" : [ "connectivity", "lastUpdated", "runningServices", "services" ],
        "type" : "object",
        "properties" : {
          "connectivity" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneService"
            }
          },
          "runningServices" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PostAgbotPatternRequest" : {
        "required" : [ "pattern", "patternOrgid" ],
        "type" : "object",
        "properties" : {
          "patternOrgid" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "nodeOrgid" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "NodeMsg" : {
        "required" : [ "agbotId", "agbotPubKey", "message", "msgId", "timeExpires", "timeSent" ],
        "type" : "object",
        "properties" : {
          "msgId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "agbotId" : {
            "type" : "string"
          },
          "agbotPubKey" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "timeSent" : {
            "type" : "string"
          },
          "timeExpires" : {
            "type" : "string"
          }
        }
      },
      "NodeError" : {
        "required" : [ "errors", "lastUpdated" ],
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "object"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "GetUsersResponse" : {
        "required" : [ "lastIndex", "users" ],
        "type" : "object",
        "properties" : {
          "users" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "User" : {
        "required" : [ "admin", "email", "hubAdmin", "lastUpdated", "password", "updatedBy" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string"
          },
          "admin" : {
            "type" : "boolean"
          },
          "hubAdmin" : {
            "type" : "boolean"
          },
          "email" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "updatedBy" : {
            "type" : "string"
          }
        }
      },
      "Org" : {
        "required" : [ "description", "heartbeatIntervals", "label", "lastUpdated", "limits", "orgType", "tags" ],
        "type" : "object",
        "properties" : {
          "orgType" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MapStringString"
          },
          "limits" : {
            "$ref" : "#/components/schemas/OrgLimits"
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          }
        }
      },
      "ListContainerStatus" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/ContainerStatus"
        }
      },
      "PutServicePolicyRequest" : {
        "required" : [ "constraints", "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "GetAgbotMsgsResponse" : {
        "required" : [ "lastIndex", "messages" ],
        "type" : "object",
        "properties" : {
          "messages" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/AgbotMsg"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ListNAService" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/NAService"
        }
      },
      "GetAgbotPatternsResponse" : {
        "required" : [ "patterns" ],
        "type" : "object",
        "properties" : {
          "patterns" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AgbotPattern"
            }
          }
        }
      },
      "MapStringNodeHealthAgreementElement" : {
        "required" : [ ],
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/NodeHealthAgreementElement"
        }
      },
      "OneUserInputValue" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "NodeHeartbeatIntervals" : {
        "required" : [ "intervalAdjustment", "maxInterval", "minInterval" ],
        "type" : "object",
        "properties" : {
          "minInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "maxInterval" : {
            "type" : "integer",
            "format" : "int32"
          },
          "intervalAdjustment" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SeqString" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "type" : "string"
        }
      },
      "ListChangeEntry" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/ChangeEntry"
        }
      },
      "NodeAgreement" : {
        "required" : [ "agrService", "lastUpdated", "services", "state" ],
        "type" : "object",
        "properties" : {
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/NAService"
            }
          },
          "agrService" : {
            "$ref" : "#/components/schemas/NAgrService"
          },
          "state" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PutServiceKeyRequest" : {
        "required" : [ "key" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PutNodesRequest" : {
        "required" : [ "jsonFormats", "name", "pattern", "publicKey", "softwareVersions", "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "registeredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/RegService"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "softwareVersions" : {
            "$ref" : "#/components/schemas/MapStringString"
          },
          "publicKey" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "ChangeEntry" : {
        "required" : [ "id", "operation", "orgId", "resource", "resourceChanges" ],
        "type" : "object",
        "properties" : {
          "orgId" : {
            "type" : "string"
          },
          "resource" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "operation" : {
            "type" : "string"
          },
          "resourceChanges" : {
            "required" : [ "first" ],
            "type" : "array",
            "properties" : {
              "first" : {
                "type" : "array",
                "properties" : { },
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/ResourceChangesInnerObject"
                }
              },
              "last0" : {
                "required" : [ "head", "next" ],
                "type" : "array",
                "properties" : {
                  "head" : {
                    "$ref" : "#/components/schemas/ResourceChangesInnerObject"
                  },
                  "next" : {
                    "type" : "array",
                    "properties" : { },
                    "items" : {
                      "$ref" : "#/components/schemas/ResourceChangesInnerObject"
                    }
                  },
                  "empty" : {
                    "type" : "boolean"
                  },
                  "traversableAgain" : {
                    "type" : "boolean"
                  }
                },
                "writeOnly" : true,
                "items" : {
                  "$ref" : "#/components/schemas/ResourceChangesInnerObject"
                }
              }
            },
            "items" : {
              "$ref" : "#/components/schemas/ResourceChangesInnerObject"
            }
          }
        }
      },
      "PolicySearchResponseDesync" : {
        "required" : [ "agbot" ],
        "type" : "object",
        "properties" : {
          "agbot" : {
            "type" : "string"
          },
          "offset" : {
            "type" : "string"
          },
          "session" : {
            "type" : "string"
          }
        }
      },
      "MapStringNode" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Node"
        }
      },
      "AdminHashpwRequest" : {
        "required" : [ "password" ],
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string"
          }
        }
      },
      "PutAgbotsRequest" : {
        "required" : [ "jsonFormats", "name", "publicKey", "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PatchAgbotsRequest" : {
        "required" : [ "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "publicKey" : {
            "type" : "string"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "PostBusinessPolicySearchResponse" : {
        "required" : [ "nodes", "offsetUpdated" ],
        "type" : "object",
        "properties" : {
          "nodes" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/BusinessPolicyNodeResponse"
            }
          },
          "offsetUpdated" : {
            "type" : "boolean"
          }
        }
      },
      "GetAdminStatusResponse" : {
        "required" : [ "dbSchemaVersion", "msg", "numberOfAgbotAgreements", "numberOfAgbotMsgs", "numberOfAgbots", "numberOfNodeAgreements", "numberOfNodeMsgs", "numberOfNodes", "numberOfUsers" ],
        "type" : "object",
        "properties" : {
          "msg" : {
            "type" : "string"
          },
          "numberOfUsers" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfNodes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfNodeAgreements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfNodeMsgs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfAgbots" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfAgbotAgreements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "numberOfAgbotMsgs" : {
            "type" : "integer",
            "format" : "int32"
          },
          "dbSchemaVersion" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ListPServices" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/PServices"
        }
      },
      "GetAgbotBusinessPolsResponse" : {
        "required" : [ "businessPols" ],
        "type" : "object",
        "properties" : {
          "businessPols" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AgbotBusinessPol"
            }
          }
        }
      },
      "Service" : {
        "required" : [ "matchHardware", "owner", "public", "requiredServices", "userInput" ],
        "type" : "object",
        "properties" : {
          "owner" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "boolean"
          },
          "documentation" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "sharable" : {
            "type" : "string"
          },
          "matchHardware" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "requiredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ServiceRef"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "deployment" : {
            "type" : "string"
          },
          "deploymentSignature" : {
            "type" : "string"
          },
          "clusterDeployment" : {
            "type" : "string"
          },
          "clusterDeploymentSignature" : {
            "type" : "string"
          },
          "imageStore" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "PostAgbotsMsgsRequest" : {
        "required" : [ "message", "ttl" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "ttl" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "NodeDetails" : {
        "required" : [ "connectivity", "constraints", "id", "lastUpdatedNode", "nodeType", "orgid", "owner", "token" ],
        "type" : "object",
        "properties" : {
          "arch" : {
            "type" : "string"
          },
          "connectivity" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "constraints" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "string"
            }
          },
          "errors" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "type" : "object"
            }
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          },
          "id" : {
            "type" : "string"
          },
          "lastHeartbeat" : {
            "type" : "string"
          },
          "lastUpdatedNode" : {
            "type" : "string"
          },
          "lastUpdatedNodeError" : {
            "type" : "string"
          },
          "lastUpdatedNodePolicy" : {
            "type" : "string"
          },
          "lastUpdatedNodeStatus" : {
            "type" : "string"
          },
          "msgEndPoint" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "nodeType" : {
            "type" : "string"
          },
          "owner" : {
            "type" : "string"
          },
          "orgid" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneProperty"
            }
          },
          "publicKey" : {
            "type" : "string"
          },
          "registeredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/RegService"
            }
          },
          "runningServices" : {
            "type" : "string"
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneService"
            }
          },
          "softwareVersions" : {
            "$ref" : "#/components/schemas/MapStringString"
          },
          "token" : {
            "type" : "string"
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          }
        }
      },
      "OneService" : {
        "required" : [ "agreementId", "arch", "containerStatus", "orgid", "serviceUrl", "version" ],
        "type" : "object",
        "properties" : {
          "agreementId" : {
            "type" : "string"
          },
          "serviceUrl" : {
            "type" : "string"
          },
          "orgid" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "containerStatus" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ContainerStatus"
            }
          },
          "operatorStatus" : {
            "type" : "object"
          },
          "configState" : {
            "type" : "string"
          }
        }
      },
      "Formats" : {
        "type" : "object"
      },
      "PutPatternKeyRequest" : {
        "required" : [ "key" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "SeqTuple2StringOptionString" : {
        "required" : [ ],
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/Tuple2StringOptionString"
        }
      },
      "MapStringService" : {
        "type" : "object",
        "properties" : { },
        "additionalProperties" : {
          "$ref" : "#/components/schemas/Service"
        }
      },
      "OneProperty" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "$colon$colonResourceChangesInnerObject" : {
        "required" : [ "head", "next" ],
        "type" : "array",
        "properties" : {
          "head" : {
            "$ref" : "#/components/schemas/ResourceChangesInnerObject"
          },
          "next" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ResourceChangesInnerObject"
            }
          },
          "empty" : {
            "type" : "boolean"
          },
          "traversableAgain" : {
            "type" : "boolean"
          }
        },
        "items" : {
          "$ref" : "#/components/schemas/ResourceChangesInnerObject"
        }
      },
      "GetAdminOrgStatusResponse" : {
        "required" : [ "msg", "nodes" ],
        "type" : "object",
        "properties" : {
          "msg" : {
            "type" : "string"
          },
          "nodes" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "PostPutServiceRequest" : {
        "required" : [ "arch", "jsonFormats", "label", "matchHardware", "public", "sharable", "url", "userInput", "version" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "boolean"
          },
          "documentation" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          },
          "arch" : {
            "type" : "string"
          },
          "sharable" : {
            "type" : "string"
          },
          "matchHardware" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "requiredServices" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/ServiceRef"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "deployment" : {
            "type" : "string"
          },
          "deploymentSignature" : {
            "type" : "string"
          },
          "clusterDeployment" : {
            "type" : "string"
          },
          "clusterDeploymentSignature" : {
            "type" : "string"
          },
          "imageStore" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "PostPutOrgRequest" : {
        "required" : [ "description", "jsonFormats", "label", "tags" ],
        "type" : "object",
        "properties" : {
          "orgType" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "tags" : {
            "$ref" : "#/components/schemas/MapStringString"
          },
          "limits" : {
            "$ref" : "#/components/schemas/OrgLimits"
          },
          "heartbeatIntervals" : {
            "$ref" : "#/components/schemas/NodeHeartbeatIntervals"
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          }
        }
      },
      "GetOrgsResponse" : {
        "required" : [ "lastIndex", "orgs" ],
        "type" : "object",
        "properties" : {
          "orgs" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Org"
            }
          },
          "lastIndex" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "BServiceVersions" : {
        "required" : [ "priority", "upgradePolicy", "version" ],
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "string"
          },
          "priority" : {
            "$ref" : "#/components/schemas/MapStringObject"
          },
          "upgradePolicy" : {
            "$ref" : "#/components/schemas/MapStringString"
          }
        }
      },
      "NodeErrorsResp" : {
        "required" : [ "error", "lastUpdated", "nodeId" ],
        "type" : "object",
        "properties" : {
          "nodeId" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string"
          },
          "lastUpdated" : {
            "type" : "string"
          }
        }
      },
      "ListServiceRef" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "$ref" : "#/components/schemas/ServiceRef"
        }
      },
      "ListString" : {
        "type" : "array",
        "properties" : { },
        "items" : {
          "type" : "string"
        }
      },
      "PatchPatternRequest" : {
        "required" : [ "agreementProtocols", "jsonFormats" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "public" : {
            "type" : "object"
          },
          "services" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/PServices"
            }
          },
          "userInput" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/OneUserInputService"
            }
          },
          "agreementProtocols" : {
            "type" : "array",
            "properties" : { },
            "items" : {
              "$ref" : "#/components/schemas/MapStringString"
            }
          },
          "jsonFormats" : {
            "$ref" : "#/components/schemas/Formats"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      },
      "NodeHealthHashElement" : {
        "required" : [ "agreements" ],
        "type" : "object",
        "properties" : {
          "lastHeartbeat" : {
            "type" : "string"
          },
          "agreements" : {
            "type" : "object",
            "properties" : { },
            "additionalProperties" : {
              "$ref" : "#/components/schemas/NodeHealthAgreementElement"
            }
          }
        }
      },
      "PostAgbotBusinessPolRequest" : {
        "required" : [ "businessPol", "businessPolOrgid" ],
        "type" : "object",
        "properties" : {
          "businessPolOrgid" : {
            "type" : "string"
          },
          "businessPol" : {
            "type" : "string"
          },
          "nodeOrgid" : {
            "type" : "string"
          },
          "anyProblem" : {
            "type" : "string"
          }
        }
      }
    }
  }
}