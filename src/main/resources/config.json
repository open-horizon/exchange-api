// Default config file for Horizon Exchange. This file is bundled in the exchange api jar file.
// To run the exchange svr with different values, copy this to /etc/horizon/exchange/config.json.
// In your version of the config file, you only have to set what you want to override.
{
  "api": {
    "acls": {
      "AdminUser": ["ALL_IN_ORG"],
      "Agbot": ["READ_MYSELF", "WRITE_MYSELF", "DATA_HEARTBEAT_MY_AGBOTS", "READ_MY_AGBOTS", "READ_ALL_AGBOTS", "READ_ALL_NODES", "SEND_MSG_TO_NODE", "READ_ALL_SERVICES", "READ_ALL_PATTERNS", "READ_ALL_BUSINESS", "READ_ALL_MANAGEMENT_POLICY", "READ_MY_ORG", "MAXCHANGEID"],
      "Anonymous": [],  // we do not actually use this
      "HubAdmin": ["READ_MYSELF", "WRITE_MYSELF", "STATUS", "ORGSTATUS", "UTILITIES", "READ_MY_ORG", "READ_IBM_ORGS", "READ_OTHER_ORGS", "CREATE_ORGS", "DELETE_ORG", "WRITE_MY_ORG", "WRITE_OTHER_ORGS", "SET_IBM_ORG_TYPE", "CREATE_USER", "WRITE_MY_USERS", "READ_MY_USERS", "CREATE_IN_OTHER_ORGS", "READ_ALL_AGBOTS", "WRITE_ALL_AGBOTS"],
      "Node": ["READ_MYSELF", "WRITE_MYSELF", "SEND_MSG_TO_AGBOT", "READ_ALL_AGBOTS", "READ_ALL_SERVICES", "READ_ALL_PATTERNS", "READ_ALL_BUSINESS", "READ_ALL_MANAGEMENT_POLICY", "READ_MY_ORG", "MAXCHANGEID"],
      "SuperUser": ["ALL"],
      "User": ["READ_MYSELF", "WRITE_MYSELF", "CREATE_NODE", "READ_MY_NODES", "WRITE_MY_NODES", "CREATE_AGBOT", "READ_MY_AGBOTS", "WRITE_MY_AGBOTS", "DATA_HEARTBEAT_MY_AGBOTS", "READ_ALL_AGBOTS", "STATUS", "UTILITIES", "MAXCHANGEID", "READ_MY_SERVICES", "READ_ALL_SERVICES", "WRITE_MY_SERVICES", "CREATE_SERVICES", "READ_MY_PATTERNS", "READ_ALL_PATTERNS", "WRITE_MY_PATTERNS", "CREATE_PATTERNS", "READ_MY_BUSINESS", "READ_ALL_BUSINESS", "WRITE_MY_BUSINESS", "CREATE_BUSINESS", "READ_MY_MANAGEMENT_POLICY", "READ_ALL_MANAGEMENT_POLICY", "READ_MY_ORG", "READ_IBM_ORGS"]
    },
    "akka": {
      "akka.http.server.request-timeout": "45s",
      "akka.http.server.server-header": ""        // Removes the Server header from response.
      // add additional entries like: "akka.http.server.max-connections": 512
      // see: https://doc.akka.io/docs/akka-http/current/configuration.html
      // and see: https://doc.akka.io/docs/akka/current/general/configuration-reference.html
      // can use this to see all of the akka config: "akka.log-config-on-start": "on"
    },
    "cache": {
      "authDbTimeoutSeconds": 15,  // timeout for db access for critical auth info when cache missing
      "IAMusersMaxSize": 300,      // the users that are backed by IAM users
      "IAMusersTtlSeconds": 300,
      "idsMaxSize": 47000,         // includes: local exchange users, nodes, agbots (all together)
      "idsTtlSeconds": 5400,
      "resourcesMaxSize": 300,     // each of: users, agbots, services, patterns, policies
      "resourcesTtlSeconds": 300,
      "type": "guava"              // currently guava is the only option
    },
    "db": {
      "acquireIncrement": 1,
      "driverClass": "org.postgresql.Driver",
      "idleConnectionTestPeriod": 0,           // in seconds; 0 disables
      "initialPoolSize": 1,
      "jdbcUrl": "",                           // the back-end db the exchange uses
      "maxConnectionAge": 0,                   // in seconds; 0 is infinite
      "maxIdleTime": 0,                        // in seconds; 0 is infinite
      "maxIdleTimeExcessConnections": 0,       // in seconds; 0 is infinite; culls connections down to the minPoolSize
      "maxPoolSize": 50,
      "maxStatementsPerConnection": 0,         // 0 disables; prepared statement caching per connection
      "minPoolSize": 1,
      "numHelperThreads": 3,
      "password": "",
      "queueSize": 1000,                       // -1 for unlimited, 0 to disable
      "testConnectionOnCheckin": false,
      "upgradeTimeoutSeconds": 180,
      "user": ""
    },
    "defaults": {
      "businessPolicy": {
        "check_agreement_status": 1800,
        "missing_heartbeat_interval": 1800  // used if the service.nodeHealth section is omitted
      },
      "msgs": {
        "expired_msgs_removal_interval": 1800  // number of seconds between deletions of expired node and agbot messages
      },
      "pattern": {
        "missing_heartbeat_interval": 1800,  // used if the services.nodeHealth section is omitted
        "check_agreement_status": 1800
      }
    },
    "limits": {
      "maxAgbots": 1000,            // maximum number of agbots 1 user is allowed to create, 0 for unlimited
      "maxAgreements": 0,           // maximum number of agreements 1 node or agbot is allowed to create, 0 for unlimited
      "maxBusinessPolicies": 5000,  // maximum number of business policies 1 user is allowed to create, 0 for unlimited
      "maxManagementPolicies": 5000,  // maximum number of management policies 1 user is allowed to create, 0 for unlimited
      "maxMessagesInMailbox": 0,    // maximum number of msgs currently in 1 node or agbot mailbox (the sending side is handled by rate limiting), 0 for unlimited
      "maxNodes": 45000,            // maximum number of nodes 1 user is allowed to create, 0 for unlimited
      "maxPatterns": 1000,          // maximum number of patterns 1 user is allowed to create, 0 for unlimited
      "maxServices": 1000           // maximum number of services 1 user is allowed to create, 0 for unlimited
    },
    "logging": {
      "level": "INFO"  // For possible values, see http://logback.qos.ch/apidocs/ch/qos/logback/classic/Level.html
    },
    "resourceChanges": {
      "cleanupInterval": 3600,  // number of seconds between pruning the resourcechanges table in the db of expired changes - 3600 is 1 hour
      "maxRecordsCap": 10000,   // maximum number of records the notification framework route will return
      "ttl": 14400              // number of seconds to keep the history records of resource changes (14400 is 4 hours). When agents miss 1 or more heartbeats, they reset querying the /changes route, so they do not need very old entries.
    },
    "root": {
      "enabled": true,  // if set to false it will not honor the root credentials
      "password": ""    // set this in your own version of this config file
    },
    "service": {
      "host": "0.0.0.0",
      "port": 8080,                 // Services HTTP traffic
      "portEncrypted": 8083,                   // Services HTTPS traffic
      "shutdownWaitForRequestsToComplete": 60  // number of seconds to let in-flight requests complete before exiting the server
    },
    "tls": {
      "password": null,   // Truststore's password.
      "truststore": null  // Absolute path and name of your pkcs12 (.p12) truststore that contains your tls certificate and private key.
    }
  }
}
