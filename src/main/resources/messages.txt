# NLS_MESSAGEFORMAT_ALL
# NLS_ENCODING=UTF-8
post.ok=post ok
invalid.credentials=invalid credentials
invalid.iam.api.key=invalid IAM API key
invalid.iam.token=invalid IAM token
access.denied=access denied
bad.input=bad input
done=done
not.found=not found
deleted=deleted
created.updated=created/updated
created=created
already.exists=already exists
error=error
warning=warning
info=info
ok=ok
too.busy=too busy
updated=updated
invalid.input.message=invalid input: {0}
unexpected.uri=unexpected uri
confirmation.successful=confirmation successful
api.bad.creds=invalid-credentials
api.access.denied=access-denied
api.already.exists=already-exists
api.invalid.input=invalid-input
api.not.found=not-found
api.internal.error=internal_error
api.not.implemented=not-implemented
api.db.connection.error=database-connection-error
api.db.timeout=database-timeout
org.not.specified=No org was specified at the beginning of the request credentials
org.not.found.user.facing.error=the iamapikey or iamtoken specified can not be used with org ''{0}'' prepended to it, because the exchange does not recognize that as a valid IBM cloud org for this iamapikey or iamtoken
incorrect.org.found.user.facing.error=the iamapikey or iamtoken specified can not be used with org ''{0}'' prepended to it, because the iamapikey or iamtoken is not associated with that org. (It is associated IBM cloud account id {1}.)
incorrect.org.found.user.facing.error.mult=the iamapikey or iamtoken specified can not be used with org ''{0}'' prepended to it, because the iamapikey or iamtoken is not associated with that org.
incorrect.org.found.user.facing.error.ICP=ICP iamapikey or iamtoken credentials can only be used in the {1} org, not the {0} org
error.getting.iam.token.from.api.key=error getting IAM token from API key: {0}
no.valid.iam.keyword=the user is not a valid IAM keyword
iam.return.value.not.set=IAM API ''{0}'' not successful in {1} retries
error.authenticating.icp.iam.key=error authenticating ICP IAM API key: {0}
error.getting.cluster.name=error getting ICP cluster name: {0}
error.authenticating.icp.iam.token=error authenticating ICP IAM token: {0}
error.authenticating.iam.token=error authenticating IAM token: {0}
error.creating.user=error creating user {0}/{1} : {2}
unable.to.get.http.request.when.authenticating=Unable to get HTTP request while authenticating
admins.not.given.permission=Admins are not given the permission {0}
in.process.db.migration=access denied - in the process of DB migration
error.creating.user.noargs=error creating user during authentication
unknown.error.invalid.creds=unknown error or invalid credentials
invalid.proptype.for.name=invalid propType ''{0}'' specified for {1}
invalid.op.for.name=invalid op ''{0}'' specified for {1}
invalid.op.for.name.opequal=invalid op ''{0}'' specified for {1} (only ''{2}'' is supported for propType ''{3}'')
invalid.boolean.value.for.name=invalid boolean value ''{0}'' specified for {1}
invalid.op.for.name.proplist=invalid op ''{0}'' specified for {1} (only ''{2}'' is supported for propType ''{3}'' and ''{4}'')
invalid.int.for.name=invalid integer value ''{0}'' specified for {1}
invalid.op.for.name.propversion=invalid op ''{0}'' specified for {1} (only ''{2}'' or ''{3}'' is supported for propType ''{4}'')
invalid.version.for.name=invalid version value ''{0}'' specified for {1}
reload.successful=reload successful
error.parsing.input.json=Error parsing the input body json: {0}
invalid.logging.level=Invalid logging level ''{0}'' specified.
db.deleted=db deleted successfully
db.not.deleted=db not deleted: {0}
db.init=db initialized successfully
db.not.init=db not initialized: {0}
db.downgrade.error=DB downgrade error: did not find a row in the schemas table
db.downgrade.success=db table schemas downgraded successfully
db.table.schemas.not.downgraded=db table schemas not downgraded: {0}
config.value.set=Config value set successfully
cache.cleared=cache cleared
service.not.in.pattern=the serviceUrl ''{0}'' specified in search body does not exist in pattern ''{1}''
token.specified.cannot.be.blank=the token specified must not be blank
token.cannot.be.empty.string=the token can not be set to the empty string
node.org.must.equal.bus.pol.org=Currently nodeOrgid must be the same as businessPolOrgid, because business policies can only be used within the organization they are defined in
agbot.name.not.in.resource=Agbot attribute name ''{0}'' is not an attribute of the agbot resource.
over.max.limit.of.agbots=Access Denied: you are over the limit of {0} agbots
agbot.added.updated=agbot added or updated
agbot.not.inserted.or.updated=agbot ''{0}'' not inserted or updated: {1}
no.valid.agbot.attribute.specified=no valid agbot attribute specified
agbot.attribute.updated=attribute ''{0}'' of agbot ''{1}'' updated
resource.not.found=resource ''{0}'' not found
agbot.not.found=agbot ''{0}'' not found
unexpected.result.from.update=Unexpected result from update: {0}
agbot.deleted=agbot deleted
agbot.not.deleted=agbot ''{0}'' not deleted: {1}
agbot.updated= agbot updated
agbot.not.updated=agbot ''{0}'' not updated: {1}
bad.public.param=URL parameter ''public'' must be ''true'' or ''false''
bad.noheartbeat.param=URL parameter ''noheartbeat'' must be ''true'' or ''false''
pattern.not.in.exchange=the referenced pattern does not exist in the exchange
pattern.added=pattern {0} added
pattern.foragbot.already.exists=pattern ''{0}'' for agbot ''{1}'' already exists
pattern.not.inserted=pattern ''{0}'' for agbot ''{1}'' not inserted: {2}
patterns.deleted=agbot patterns deleted
patterns.not.found=no patterns for agbot ''{0}'' found
patterns.not.deleted=patterns for agbot ''{0}'' not deleted: {1}
agbot.pattern.deleted=agbot pattern deleted
pattern.not.found=pattern ''{0}'' for agbot ''{1}'' not found
pattern.not.deleted=pattern ''{0}'' for agbot ''{1}'' not deleted: {2}
buspol.not.in.exchange=the referenced business policy does not exist in the exchange
buspol.added=businessPol {0} added
buspol.foragbot.already.exists=businessPol ''{0}'' for agbot ''{1}'' already exists
buspol.not.inserted=businessPol ''{0}'' for agbot ''{1}'' not inserted: {2}
buspols.deleted=agbot business policies deleted
buspols.not.found=no business policies for agbot ''{0}'' found
buspols.not.deleted=businessPols for agbot ''{0}'' not deleted: {1}
buspol.deleted=agbot business policy deleted
buspol.not.found=businessPol ''{0}'' for agbot ''{1}'' not found
buspol.not.deleted=businessPol ''{0}'' for agbot ''{1}'' not deleted: {2}
over.max.limit.of.agreements=Access Denied: you are over the limit of {0} agreements for this agbot
agreement.added.or.updated=agreement added or updated
agreement.not.inserted.or.updated=agreement ''{0}'' for agbot ''{1}'' not inserted or updated: {2}
agbot.agreements.deleted=agbot agreements deleted
no.agreements.found.for.agbot=no agreements for agbot ''{0}'' found
agbot.agreements.not.deleted=agreements for agbot ''{0}'' not deleted: {1}
agbot.agreement.deleted=agbot agreement deleted
agreement.for.agbot.not.found=agreement ''{0}'' for agbot ''{1}'' not found
agreement.for.agbot.not.deleted=agreement ''{0}'' for agbot ''{1}'' not deleted: {2}
agreement.active=agreement active
agreement.not.found.not.active=agreement not found or not active
agbot.mailbox.full=Access Denied: the message mailbox of {0} is full ({1} messages)
agbot.message.invalid.input=Invalid Input: the message sender must have their public key registered with the Exchange
agbot.message.not.inserted=agbot ''{0}'' msg not inserted: {1}
agbot.message.deleted=agbot msg deleted
msgid.must.be.int=msgid must be an integer: {0}
agbot.message.not.found=msg ''{0}'' for agbot ''{1}'' not found
agbot.message.not.deleted=msg ''{0}'' for agbot ''{1}'' not deleted: {2}
db.timeout.getting.token=DB timed out getting pw/token for ''{0}'' and it was not in the cache. {1}
db.timeout.getting.owner=DB timed out getting owner or isAdmin for ''{0}'' and it was not in the cache. {1}
db.timeout.getting.bool=DB timed out getting ''{0}'' boolean for ''{1}'' and it was not in the cache. {2}
db.threw.exception=DB access threw exception: {0}
db.migration.in.progress=access denied - in the process of DB migration
required.headers.not.set=front end header {0} set, but not the rest of the required headers
username.not.found=username not found
unexpected.identity=Unexpected identity type {0} from front end
bad.auth.header=Basic auth header is missing '':'' or is bad encoded format
invalid.credentials.string=invalid credentials format, either it is missing '':'' or is bad encoded format: {0}
only.use.basic.auth=if the Authorization field in the header is specified, only Basic auth is currently supported
no.creds.given=no credentials given
access.denied.no.auth=Access denied: ''{0}'' does not have authorization: {1} {2}
access.denied.no.exchange.front.end=Access denied: an exchange front end is not authorized in the config.json
buspol.wrong.attribute=Business Policy attribute name ''{0}'' is not an attribute of the business policy resource.
service.not.in.exchange.no.index=the following referenced service does not exist in the exchange: org= {0}, url= {1}, version= {2}, arch= {3}
service.not.in.exchange.index=the {0} referenced service does not exist in the exchange
over.max.limit.buspols=Access Denied: you are over the limit of {0} business policies
buspol.created=business policy ''{0}'' created
buspol.not.created=business policy ''{0}'' not created: {1}
buspol.already.exists=business policy ''{0}'' already exists: {1}
buspol.updated=business policy updated
business.policy.not.found=business policy ''{0}'' not found
buspol.not.updated=business policy ''{0}'' not updated: {1}
no.valid.buspol.attribute.specified=no valid business policy attribute specified
buspol.attribute.updated=attribute ''{0}'' of business policy ''{1}'' updated
business.policy.deleted=business policy deleted
business.policy.not.deleted=business policy ''{0}'' not deleted: {1}
db.timeout.upgrading=DB timed out while upgrading it: {0}
db.exception.upgrading=while upgrading the DB, the DB threw exception: {0}
db.upgrade.error=DB upgrade error: did not find a row in the schemas table
db.upgraded.successfully=DB table schema initialized or upgraded successfully
db.not.upgraded=DB table schema not upgraded: {0}
token.must.not.be.blank=the token specified must not be blank
invalid.node.type=the ''nodeType'' attribute must have one of these values: {0}
invalid.node.type2=the ''nodetype'' url parameter must have one of these values: {0}
pattern.must.have.orgid.prepended=the ''pattern'' attribute must have the orgid prepended, with a slash separating
configstate.must.be.suspended.or.active=the configState value must be either ''suspended'' or ''active''.
node.has.no.services=node has no registeredServices to change the configState of.
did.not.find.registered.services=did not find any registeredServices that matched the given org and url criteria.
property.type.must.be=The properties.type value ''{0}'' must be 1 of: {1}
must.specify.service.or.agreementservice=you must specify at least 1 of ''services'' or ''agreementService''.
not.a.node.attribute=Node attribute name ''{0}'' is not an attribute of the node resource.
over.max.limit.of.nodes=Access Denied: you are over the limit of {0} nodes
over.org.max.limit.of.nodes=Access Denied: Your current total number of nodes, {0}, is either equal to or over the org limit of {1} nodes
node.added.or.updated=node added or updated
num.nodes.near.org.limit=The org {0} has reached 95% of the node limit: {1} nodes.
node.not.inserted.or.updated=node ''{0}'' not inserted or updated: {1}
no.valid.note.attr.specified=no valid node attribute specified
node.attribute.updated=attribute ''{0}'' of node ''{1}'' updated
node.not.found=node ''{0}'' not found
node.services.updated=registeredServices of node ''{0}'' updated
node.deleted=node deleted
node.not.deleted=node ''{0}'' not deleted: {1}
node.updated=node updated
node.not.updated=node ''{0}'' not updated: {1}
status.added.or.updated=status added or update
node.status.not.inserted.or.updated=status for node ''{0}'' not inserted or updated: {1}
node.status.deleted=node status deleted
node.status.not.found=status for node ''{0}'' not found
node.status.not.deleted=status for node ''{0}'' not deleted: {1}
node.policy.added.or.updated=policy added or updated
node.policy.not.updated=policy for node ''{0}'' not updated: {1}
node.policy.not.inserted.or.updated=policy for node ''{0}'' not inserted or updated: {1}
node.policy.deleted=node policy deleted
node.policy.not.found=policy for node ''{0}'' not found
node.policy.not.deleted=policy for node ''{0}'' not deleted: {1}
over.limit.of.agreements.for.node=Access Denied: you are over the limit of {0} agreements for this node
node.agreement.added.or.updated=agreement added or updated
node.agreement.not.updated=agreement for node ''{0}'' not updated: {1}
node.agreement.not.inserted.or.updated=agreement ''{0}'' for node ''{1}'' not inserted or updated: {2}
node.agreements.deleted=node agreements deleted
no.node.agreements.found=no agreements for node ''{0}'' found
node.agreements.not.deleted=agreements for node ''{0}'' not deleted: {1}
node.agreement.deleted=node agreement deleted
node.agreement.not.found=agreement ''{0}'' for node ''{1}'' not found
node.agreement.not.deleted=agreement ''{0}'' for node ''{1}'' not deleted: {2}
node.mailbox.full=Access Denied: the message mailbox of {0} is full ({1} messages)
message.sender.public.key.not.in.exchange=Invalid Input: the message sender must have their public key registered with the Exchange
invalid.input.agbot.not.found=Invalid Input: agbot {0} not found
node.msg.inserted=node msg {0} inserted
node.msg.not.inserted=node ''{0}'' msg not inserted: {1}
node.msg.deleted=node msg deleted
node.msg.not.found=msg ''{0}'' for node ''{1}'' not found
node.msg.not.deleted=msg ''{0}'' for node ''{1}'' not deleted: {2}
org.attr.not.part.of.org=Org attribute name ''{0}'' is not an attribute of the org resource.
org.get.orgtype=orgType must be ''IBM'' or blank
org.created=org ''{0}'' created
org.not.created=org ''{0}'' not created: {1}
org.already.exists=org ''{0}'' already exists: {1}
org.updated=org updated
org.not.found=org ''{0}'' not found
org.not.updated="org ''{0}'' not updated: {1}
no.valid.org.attr.specified=no valid org attribute specified
org.attr.updated=attribute ''{0}'' of org ''{1}'' updated
org.deleted=org deleted
org.not.deleted=org ''{0}'' not deleted: {1}
no.version.specified.for.service=no versions specified for service ''{0}'', ''{1}'', ''{2}''
pattern.definition.not.signed=this pattern definition is not signed.
pattern.attr.not.in.pattern=Pattern attribute name ''{0}'' is not an attribute of the pattern resource.
only.ibm.patterns.can.be.public=only IBM patterns can be made public
over.limit.of.max.patterns=Access Denied: you are over the limit of {0} patterns
pattern.created=pattern ''{0}'' created
pattern.not.created=pattern ''{0}'' not created: {1}
pattern.already.exists=pattern ''{0}'' already exists: {1}
key.added.or.updated=key added or updated
pattern.key.not.inserted.or.updated=key ''{0}'' for pattern ''{1}'' not inserted or updated: {2}
pattern.keys.deleted=pattern keys deleted
no.pattern.keys.found=no keys for pattern ''{0}'' found
pattern.keys.not.deleted=keys for pattern ''{0}'' not deleted: {1}
pattern.key.deleted=pattern key deleted
pattern.key.not.found=key ''{0}'' for pattern ''{1}'' not found
pattern.key.not.deleted=key ''{0}'' for pattern ''{1}'' not deleted: {2}
pattern.id.not.found=pattern ''{0}'' not found
pattern.updated=pattern updated
pattern.not.updated=pattern ''{0}'' not updated: {1}
no.valid.pattern.attribute.specified=no valid pattern attribute specified
pattern.attribute.not.update=attribute ''{0}'' of pattern ''{1}'' updated
pattern.deleted=pattern deleted
pattern.id.not.deleted=pattern ''{0}'' not deleted: {1}
key.not.found=key ''{0}'' not found
documentation.field.not.valid.url=the ''documentation'' field is not valid URL format.
version.not.valid.format=version ''{0}'' is not valid version format.
arch.cannot.be.empty=arch can not be empty.
service.id.does.not.match=the service id specified in the URL does not match the url, version, and arch in the body.
invalid.sharable.value=invalid value ''{0}'' for the sharable attribute.
no.version.range.in.req.service=required service ''{0}'' does not contain a versionRange
req.service.has.wrong.arch=required service ''{0}'' has arch ''{1}'', which is different than this service''s arch ''{2}''
service.def.not.signed=this service definition is not signed.
attribute.not.part.of.service=Service attribute name ''{0}'' is not an attribute of the service resource.
req.service.not.in.exchange=the following required service does not exist in the exchange: org= {0}, url= {1}, version= {2}, arch= {3}
over.the.limit.of.services=Access Denied: you are over the limit of {0} services
service.created=service ''{0}'' created
service.not.created=service ''{0}'' not created: {1}
service.already.exists=service ''{0}'' already exists: {1}
service.updated=service updated
service.not.found=service ''{0}'' not found
service.not.updated=service ''{0}'' not updated: {1}
no.valid.service.attr.specified=no valid service attribute specified
cannot.patch.these.attributes=patching attributes ''url'', ''version'', and ''arch'' are not allowed (because the id would not match). To change those attributes you must delete the resource and recreate it.
invalid.value.for.sharable.attribute=invalid value ''{0}'' for the sharable attribute.
service.attr.updated=attribute ''{0}'' of service ''{1}'' updated
service.deleted=service deleted
service.not.deleted=service ''{0}'' not deleted: {1}
policy.added.or.updated=policy added or updated
policy.not.inserted.or.updated=policy for service ''{0}'' not inserted or updated: {1}
service.policy.deleted=service policy deleted
service.policy.not.found=policy for service ''{0}'' not found
service.policy.not.deleted=policy for service ''{0}'' not deleted: {1}
service.key.not.inserted.or.updated=key ''{0}'' for service ''{1}'' not inserted or updated: {2}
service.keys.deleted=service keys deleted
no.service.keys.found=no keys for service ''{0}'' found
service.keys.not.deleted=keys for service ''{0}'' not deleted: {1}
service.key.deleted=service key deleted
service.key.not.found=key ''{0}'' for service ''{1}'' not found
service.key.not.deleted=key ''{0}'' for service ''{1}'' not deleted: {2}
duplicate.dockauth.resource.already.exists=duplicate dockauth resource already exists
dockauth.resource.updated=dockauth resource updated
dockauth.num.added=dockauth {0} added
dockauth.unexpected=unexpected result from the DB when trying to add a dockauth
service.dockauth.not.inserted=dockAuthId ''{0}'' for service ''{1}'' not inserted: {1}
dockauth.updated=dockauth {0} updated
dockauth.not.found=dockauth {0} not found
service.dockauth.not.updated=dockAuthId ''{0}'' for service ''{1}'' not updated: {2}
service.dockauths.deleted=service dockauths deleted
no.dockauths.found.for.service=no dockauths for service ''{0}'' found
service.dockauths.not.deleted=dockauths for service ''{0}'' not deleted: {1}
service.dockauths.not.found=dockauths ''{0}'' for service ''{1}'' not found
password.cannot.be.set.to.empty.string=the password cannot be set to the empty string
password.must.be.non.blank.when.creating.user=the password must be non-blank when creating a user
anonymous.client.cannot.create.admin=an anonymous client can not create a user with admin authority
user.added.successfully={0} user added successfully
user.not.added=user not added: {0}
user.added.or.updated.successfully={0} user added or updated successfully
user.not.added.or.updated.successfully=user not added or updated: {0}
non.admin.user.cannot.make.admin.user=a user without admin privilege can not give admin privilege
user.updated.successfully=user updated successfully
user.not.updated=user not updated: {0}
user.not.found=user ''{0}'' not found
no.valid.agbot.attr.specified=no valid agbot attribute specified
user.attr.updated=attribute ''{0}'' of user ''{1}'' updated
user.not.inserted.or.updated=user ''{0}'' not inserted or updated: {1}
user.deleted=user deleted
user.not.deleted=user ''{0}'' not deleted: {1}
password.updated.successfully=password updated successfully
user.password.not.updated=user ''{0}'' password not updated: {1}
logging.level.set=Logging level set
node.msg.nodeid.not.found=node ''{0}'' not found: {1}
agbot.message.agbotid.not.found=agbot ''{0}'' not found: {1}
no.version.specified.for.service2=no versions specified for service
no.service.ref.specified.for.service=''name'', ''org'', and ''arch'' must all be specified for a service
not.pattern.when.policy=can not set a pattern when the node is already using policy
node.errors.added=node errors added or updated
node.errors.not.inserted=errors for node ''{0}'' not inserted or updated: {1}
node.errors.deleted=node errors deleted
node.errors.not.found=errors for node ''{0}'' not found
node.errors.not.deleted=errors for node ''{0}'' not deleted: {1}
no.services.defined.in.pattern=No services were found in the pattern or the services field was left empty
node.or.agbot.not.found=Node or agbot ''{0}'' not found
dockauth.must.be.int=dockauthid must be an integer:  {1}
only.super.users.make.hub.admins=This user does not have permissions to make Hub Admins
org.limits.cannot.be.over.exchange.limits=Org specific limits cannot be over the global exchange limit. Org limit: {0}; Exchange Limit: {1}
exchange.server.operating.normally=Exchange server operating normally
hub.admins.in.root.org=Hub Admin users must be created in the root org
hub.admins.only.view.admins=Hub Admin users can only view org admin users
hub.admins.only.write.admins=Hub Admin users can only create or update hub admin or org admin users
no.access.to.org=Caller does not have access to org: {0}
invalid.account.id=Account ID not valid
account.id.not.assigned.to.caller=Account ID is not assigned to caller
account.id.invalid.or.not.assigned=Account ID is not valid or is not assigned to caller
user.cannot.be.in.root.org=Only the root user and hub admins can exist in the root org
creating.updating.superuser.not.allowed=Creating or updating the root user is not allowed
cannot.delete.root.user=Cannot delete the exchange root user
cannot.delete.root.org=Cannot delete the exchange root org
node.id.not.iamapikey.or.iamtoken=Node id cannot be ''iamapikey'' or ''iamtoken''
pkcs12.not.found=TLS PKCS #12 ''{0}'' not found on the filesystem
pkcs12.password.incorrect=TLS PKCS #12 password was incorrect
server.start=Server online at {0}
server.start.failure.http=HTTP server could not start!
server.start.failure.https=HTTPS server could not start!
message.cleanup.cancel=Cancelled scheduled message cleanup
message.cleanup.scheduled=Scheduling Agreement Bot message and Node message cleanup every {0} with a starting delay of {1}
changes.cleanup.cancel=Cancelled scheduled change record cleanup
changes.cleanup.scheduled=Scheduling change record cleanup every {0}
