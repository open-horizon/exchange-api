# Exchange default reference settings
api {
  acls {
    AdminUser =
      ["ALL_IN_ORG",
       "WRITE_AGENT_CONFIG_MGMT"]
    Agbot =
      ["DATA_HEARTBEAT_MY_AGBOTS",
       "MAXCHANGEID",
       "READ_MYSELF",
       "READ_AGENT_CONFIG_MGMT",
       "READ_ALL_AGBOTS",
       "READ_ALL_NODES",
       "READ_ALL_SERVICES",
       "READ_ALL_PATTERNS",
       "READ_ALL_BUSINESS",
       "READ_ALL_MANAGEMENT_POLICY",
       "READ_MY_AGBOTS",
       "READ_MY_ORG",
       "SEND_MSG_TO_NODE",
       "WRITE_AGENT_CONFIG_MGMT",
       "WRITE_MYSELF"]
    Anonymous = []    # Not actually used
    HubAdmin =
      ["CREATE_IN_OTHER_ORGS",
       "CREATE_ORGS",
       "CREATE_USER",
       "DELETE_ORG",
       "ORGSTATUS",
       "READ_AGENT_CONFIG_MGMT",
       "READ_ALL_AGBOTS",
       "READ_IBM_ORGS",
       "READ_MY_ORG",
       "READ_MY_USERS",
       "READ_MYSELF",
       "READ_OTHER_ORGS",
       "SET_IBM_ORG_TYPE",
       "STATUS",
       "UTILITIES",
       "WRITE_AGENT_CONFIG_MGMT",
       "WRITE_ALL_AGBOTS",
       "WRITE_MY_ORG",
       "WRITE_MY_USERS",
       "WRITE_MYSELF",
       "WRITE_OTHER_ORGS"]
    Node =
      ["MAXCHANGEID",
       "READ_AGENT_CONFIG_MGMT",
       "READ_ALL_AGBOTS",
       "READ_ALL_BUSINESS",
       "READ_ALL_MANAGEMENT_POLICY",
       "READ_ALL_PATTERNS",
       "READ_ALL_SERVICES",
       "READ_MY_ORG",
       "READ_MYSELF",
       "SEND_MSG_TO_AGBOT",
       "WRITE_MYSELF"],
    SuperUser = ["ALL"]
    User =
      ["CREATE_AGBOT",
       "CREATE_BUSINESS",
       "CREATE_NODE",
       "CREATE_PATTERNS",
       "CREATE_SERVICES",
       "DATA_HEARTBEAT_MY_AGBOTS",
       "READ_AGENT_CONFIG_MGMT",
       "READ_ALL_AGBOTS",
       "READ_ALL_BUSINESS",
       "READ_ALL_MANAGEMENT_POLICY",
       "READ_ALL_PATTERNS",
       "READ_ALL_SERVICES",
       "READ_IBM_ORGS",
       "READ_MY_AGBOTS",
       "READ_MY_BUSINESS",
       "READ_MY_NODES",
       "READ_MY_PATTERNS",
       "READ_MY_MANAGEMENT_POLICY",
       "READ_MY_ORG",
       "READ_MY_SERVICES",
       "READ_MYSELF",
       "STATUS",
       "UTILITIES",
       "WRITE_MY_AGBOTS",
       "WRITE_MY_BUSINESS",
       "WRITE_MY_NODES",
       "WRITE_MY_PATTERNS",
       "WRITE_MY_SERVICES",
       "WRITE_MYSELF"]
  }

  authentication.oauth.identity.organization.header = "X-Organization"
  authentication.oauth.provider.user_info {
    groups_claim_key = "groups"
    url              = null
  }

  # https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
  # https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#argon2id
  # The following are all at the same work factor trading memory and cpu compute.
  # m=47104 (46 MiB), t=1, p=1 (Do not use with Argon2i)
  # m=19456 (19 MiB), t=2, p=1 (Do not use with Argon2i)
  # m=12288 (12 MiB), t=3, p=1
  # m=9216  ( 9 MiB), t=4, p=1
  # m=7168  ( 7 MiB), t=5, p=1
  cryptography.argon2id {
    hash_length = 32      # In Bytes
    iterations  = 5
    memory      = 7168    # In Kilobytes
    parallelism = 1
    salt_length = 16      # In Bytes. The salt length has to less than the hash length.
  }

  # DO NOT use this configuration for credential storage. This is NOT secure!
  cryptography.argon2id-lite-workfactor {
    hash_length = 4       # In Bytes
    iterations  = 1
    memory      = 0       # In Kilobytes
    parallelism = 1
    salt_length = 2       # In Bytes. The salt length has to less than the hash length.
  }

  db.upgradeTimeoutSeconds = 180

  defaults.businessPolicy.check_agreement_status     = 1800
  defaults.businessPolicy.missing_heartbeat_interval = 1800    # Used if the service.nodeHealth section is omitted
  defaults.msgs.expired_msgs_removal_interval        = 1800    # Number of seconds between deletions of expired node and agbot messages
  defaults.pattern.missing_heartbeat_interval        = 1800    # Used if the service.nodeHealth section is omitted
  defaults.pattern.check_agreement_status            = 1800

  # Create new Hub Admin users. Cannot update existing users.
  # Hubadmin Syntax
  # hubadmins = [
  #  {org = "root",
  #   password = "<password>",
  #   user = "user1"},
  #  {org = "root",
  #   password = "<api key>",
  #   user = "user2"}
  # ]
  # User's organization must be "root".
  # Username must be defined, and cannot be "root".
  # Will only create the first instance of a User.
  hubadmins = []

  language = "en"

  limits.maxAgbots             = 1000    # Maximum number of agbots 1 user is allowed to create, 0 for unlimited
  limits.maxAgreements         = 0       # Maximum number of agreements 1 node or agbot is allowed to create, 0 for unlimited
  limits.maxBusinessPolicies   = 5000    # Maximum number of business policies 1 user is allowed to create, 0 for unlimited
  limits.maxManagementPolicies = 5000    # Maximum number of management policies 1 user is allowed to create, 0 for unlimited
  limits.maxMessagesInMailbox  = 0       # Maximum number of msgs currently in 1 node or agbot mailbox (the sending side is handled by rate limiting), 0 for unlimited
  limits.maxNodes              = 45000   # Maximum number of nodes 1 user is allowed to create, 0 for unlimited
  limits.maxPatterns           = 1000    # Maximum number of patterns 1 user is allowed to create, 0 for unlimited
  limits.maxServices           = 1000    # Maximum number of services 1 user is allowed to create, 0 for unlimited

  resourceChanges.cleanupInterval    = 3600     # Number of seconds between pruning the resourcechanges table in the db of expired changes - 3600 is 1 hour
  resourceChanges.maxRecordsCap      = 10000    # Maximum number of records the notification framework route will return
  resourceChanges.contentionDuration = 2        # In high through-put, high current systems the log of change records have a contention period for the records to stablize. This accounts for this period in seconds. This setting may need to increase with scaling.
  resourceChanges.ttl                = 14400    # Number of seconds to keep the history records of resource changes (14400 is 4 hours). When agents miss 1 or more heartbeats, they reset querying the /changes route, so they do not need very old entries

  # ie. root.account_id.ibmcloud_id = 012345689
  root.account_id = null
  root.enabled    = true    # If set to false it will not honor the root credentials
  root.password   = null

  service.host                              = "0.0.0.0"
  service.shutdownWaitForRequestsToComplete = 5

  tls.password   = null     # Truststore's password
  tls.truststore = null     # Absolute path and name of your pkcs12 (.p12) truststore that contains your tls certificate and private key

  cache {
    authDbTimeoutSeconds    = 15         # Timeout for db access for critical auth info when cache missing
    IAMusersMaxSize         = 300        # The users that are backed by IAM users
    IAMusersTtlSeconds      = 300
    idsMaxSize              = 47000      # Includes: local exchange users, nodes, agbots (all together)
    idsTtlSeconds           = 5400
    loader {
      agreementBot.enable   = false      # Experimental. Attempt to premeptively load the cache.
      agreementBot.interval = 5m
      node.enable           = false      # Experimental. Attempt to premeptively load the cache.
      node.interval         = 15s
      user.enable           = false      # Experimental. Attempt to premeptively load the cache.
      user.interval         = 5m
    }
    resourcesMaxSize        = 47000      # Each of: users, agbots, services, patterns, policies
    resourcesTtlSeconds     = 5400
    type                    = "guava"    # Currently guava is the only option
  }
}

# Scala SLICK and HikariCP settings for a PostgreSQL instance
# HikariCP Settings Reference: https://github.com/brettwooldridge/HikariCP
# Add thread pool settings directly.
# DO NOT use numThreads and maximumPoolSize seperately!
exchange-db-connection = { # No default application reference
  connectionPool  = "HikariCP"
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  # properties are tied to the datasource class.
  properties {
    databaseName  = "openhorizon"
    password      = null
    portNumber    = 5432
    serverName    = "localhost"
    user          = "root"
  }
  registerMbeans  = true
}

ibm {
  common-services {
    external-management-ingress     = null    # transport protocol and domain
    management-ingress-service-port = 4300
    identity-provider-service-port  = 8443
  }
}

# Logback loggers
logback {
  core.model.processor.AppenderRefModelHandler = "OFF"
  classic.model.processor.LoggerModelHandler = "OFF"

  hikari {
    HikariConfig     = "DEBUG"
    HikariDataSource = "DEBUG"
    pool.HikariPool  = "INFO"
    pool.PoolBase    = "INFO"
  }

  scalacache.caffeine.CaffeineCache = "DEBUG"

  slick {
    basic.BasicBackend.action = "INFO"
    basic.BasicBackend.stream = "INFO"

    compiler-log = "INFO"
    compiler {
      AssignUniqueSymbols    = "INHERITED"
      CreateAggregates       = "INHERITED"
      CreateResultSetMapping = "INHERITED"
      CodeGen                = "INHERITED"
      EmulateOuterJoins      = "INHERITED"
      ExpandConditionals     = "INHERITED"
      ExpandRecords          = "INHERITED"
      ExpandSums             = "INHERITED"
      ExpandTables           = "INHERITED"
      FixRowNumberOrdering   = "INHERITED"
      FlattenProjections     = "INHERITED"
      ForceOuterBinds        = "INHERITED"
      HoistClientOps         = "INHERITED"
      InferTypes             = "INHERITED"
      Inline                 = "INHERITED"
      InsertCompiler         = "INHERITED"
      MergeToComprehensions  = "INHERITED"
      OptimizeScalar         = "INHERITED"
      PruneProjections       = "INHERITED"
      QueryCompiler          = "INHERITED"
      QueryCompilerBenchmark = "INHERITED"
      RemoveFieldNames       = "INHERITED"
      RemoveMappedTypes      = "INHERITED"
      RemoveTakeDrop         = "INHERITED"
      ReorderOperations      = "INHERITED"
      ResolveZipJoins        = "INHERITED"
      RewriteBooleans        = "INHERITED"
      RewriteDistinct        = "INHERITED"
      RewriteJoins           = "INHERITED"
      SpecializeParameters   = "INHERITED"
      VerifyTypes            = "INHERITED"
    }

    jdbc {
      DriverDataSource                  = "INFO"
      JdbcBackend.benchmark             = "INFO"
      JdbcBackend.parameter             = "INFO"
      JdbcBackend.statement             = "INFO"
      JdbcBackend.statementAndParameter = "INFO"
      JdbcModelBuilder                  = "INFO"
      StatementInvoker.result           = "INFO"
    }

    memory.HeapBackend      = "INHERITED"
    memory.QueryInterpreter = "INHERITED"

    relational.ResultConverterCompiler = "INFO"

    util.AsyncExecutor = "DEBUG"
  }

  swagger.v3.core.converter.ModelConverterContextImpl = "INFO"
  swagger.v3.jaxrs2.Reader = "INFO"
}
